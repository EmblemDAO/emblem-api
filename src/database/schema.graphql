type Award implements Node {
  awardNumber: String
  blockAwarded: Int
  definitionId: String!
  globalAwardNumber: String
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  transactionHash: String
  winnerId: String!
}

"""
A condition to be used against `Award` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AwardCondition {
  """Checks for equality with the object’s `awardNumber` field."""
  awardNumber: String

  """Checks for equality with the object’s `blockAwarded` field."""
  blockAwarded: Int

  """Checks for equality with the object’s `definitionId` field."""
  definitionId: String

  """Checks for equality with the object’s `globalAwardNumber` field."""
  globalAwardNumber: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `transactionHash` field."""
  transactionHash: String

  """Checks for equality with the object’s `winnerId` field."""
  winnerId: String
}

"""
A filter to be used against `Award` object types. All fields are combined with a logical ‘and.’
"""
input AwardFilter {
  """Checks for all expressions in this list."""
  and: [AwardFilter!]

  """Filter by the object’s `awardNumber` field."""
  awardNumber: StringFilter

  """Filter by the object’s `blockAwarded` field."""
  blockAwarded: IntFilter

  """Filter by the object’s `definitionId` field."""
  definitionId: StringFilter

  """Filter by the object’s `globalAwardNumber` field."""
  globalAwardNumber: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Negates the expression."""
  not: AwardFilter

  """Checks for any expressions in this list."""
  or: [AwardFilter!]

  """Filter by the object’s `transactionHash` field."""
  transactionHash: StringFilter

  """Filter by the object’s `winnerId` field."""
  winnerId: StringFilter
}

"""An input for mutations affecting `Award`"""
input AwardInput {
  awardNumber: String
  blockAwarded: Int
  definitionId: String!
  globalAwardNumber: String
  id: Int
  transactionHash: String
  winnerId: String!
}

"""
Represents an update to a `Award`. Fields that are set will be updated.
"""
input AwardPatch {
  awardNumber: String
  blockAwarded: Int
  definitionId: String
  globalAwardNumber: String
  id: Int
  transactionHash: String
  winnerId: String
}

"""Methods to use when ordering `Award`."""
enum AwardsOrderBy {
  AWARD_NUMBER_ASC
  AWARD_NUMBER_DESC
  BLOCK_AWARDED_ASC
  BLOCK_AWARDED_DESC
  DEFINITION_ID_ASC
  DEFINITION_ID_DESC
  GLOBAL_AWARD_NUMBER_ASC
  GLOBAL_AWARD_NUMBER_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TRANSACTION_HASH_ASC
  TRANSACTION_HASH_DESC
  WINNER_ID_ASC
  WINNER_ID_DESC
}

"""All input for the create `Award` mutation."""
input CreateAwardInput {
  """The `Award` to be created by this mutation."""
  award: AwardInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Award` mutation."""
type CreateAwardPayload {
  """The `Award` that was created by this mutation."""
  award: Award

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Definition` mutation."""
input CreateDefinitionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Definition` to be created by this mutation."""
  definition: DefinitionInput!
}

"""The output of our create `Definition` mutation."""
type CreateDefinitionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Definition` that was created by this mutation."""
  definition: Definition

  """Reads a single `Protocol` that is related to this `Definition`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Role` that is related to this `Definition`."""
  roleByRoleId: Role

  """Reads a single `Track` that is related to this `Definition`."""
  trackByTrackId: Track
}

"""All input for the create `EarnedBadge` mutation."""
input CreateEarnedBadgeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EarnedBadge` to be created by this mutation."""
  earnedBadge: EarnedBadgeInput!
}

"""The output of our create `EarnedBadge` mutation."""
type CreateEarnedBadgePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Definition` that is related to this `EarnedBadge`."""
  definitionByDefinitionId: Definition

  """The `EarnedBadge` that was created by this mutation."""
  earnedBadge: EarnedBadge

  """Reads a single `Protocol` that is related to this `EarnedBadge`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Winner` that is related to this `EarnedBadge`."""
  winnerByWinnerId: Winner
}

"""All input for the create `KnexMigration` mutation."""
input CreateKnexMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `KnexMigration` to be created by this mutation."""
  knexMigration: KnexMigrationInput!
}

"""The output of our create `KnexMigration` mutation."""
type CreateKnexMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigration` that was created by this mutation."""
  knexMigration: KnexMigration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `KnexMigrationsLock` mutation."""
input CreateKnexMigrationsLockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `KnexMigrationsLock` to be created by this mutation."""
  knexMigrationsLock: KnexMigrationsLockInput!
}

"""The output of our create `KnexMigrationsLock` mutation."""
type CreateKnexMigrationsLockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigrationsLock` that was created by this mutation."""
  knexMigrationsLock: KnexMigrationsLock

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Protocol` mutation."""
input CreateProtocolInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Protocol` to be created by this mutation."""
  protocol: ProtocolInput!
}

"""The output of our create `Protocol` mutation."""
type CreateProtocolPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Protocol` that was created by this mutation."""
  protocol: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Ranking` mutation."""
input CreateRankingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Ranking` to be created by this mutation."""
  ranking: RankingInput!
}

"""The output of our create `Ranking` mutation."""
type CreateRankingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Protocol` that is related to this `Ranking`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Ranking` that was created by this mutation."""
  ranking: Ranking

  """Reads a single `Winner` that is related to this `Ranking`."""
  winnerByWinnerId: Winner
}

"""All input for the create `Role` mutation."""
input CreateRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Role` to be created by this mutation."""
  role: RoleInput!
}

"""The output of our create `Role` mutation."""
type CreateRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Protocol` that is related to this `Role`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Role` that was created by this mutation."""
  role: Role
}

"""All input for the create `Track` mutation."""
input CreateTrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Track` to be created by this mutation."""
  track: TrackInput!
}

"""The output of our create `Track` mutation."""
type CreateTrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Protocol` that is related to this `Track`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Track` that was created by this mutation."""
  track: Track
}

"""All input for the create `Winner` mutation."""
input CreateWinnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Winner` to be created by this mutation."""
  winner: WinnerInput!
}

"""The output of our create `Winner` mutation."""
type CreateWinnerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Winner` that was created by this mutation."""
  winner: Winner
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

type Definition implements Node {
  definition: String

  """Reads and enables pagination through a set of `EarnedBadge`."""
  earnedBadgesByDefinitionIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EarnedBadgeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EarnedBadgeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EarnedBadge`."""
    orderBy: [EarnedBadgesOrderBy!]
  ): [EarnedBadge!]!
  id: String!
  ipfsUri: String
  metric: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Protocol` that is related to this `Definition`."""
  protocolByProtocolId: Protocol
  protocolId: String!

  """Reads a single `Role` that is related to this `Definition`."""
  roleByRoleId: Role
  roleId: String
  threshold: String

  """Reads a single `Track` that is related to this `Definition`."""
  trackByTrackId: Track
  trackId: String!
}

"""
A condition to be used against `Definition` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DefinitionCondition {
  """Checks for equality with the object’s `definition` field."""
  definition: String

  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `ipfsUri` field."""
  ipfsUri: String

  """Checks for equality with the object’s `metric` field."""
  metric: String

  """Checks for equality with the object’s `protocolId` field."""
  protocolId: String

  """Checks for equality with the object’s `roleId` field."""
  roleId: String

  """Checks for equality with the object’s `threshold` field."""
  threshold: String

  """Checks for equality with the object’s `trackId` field."""
  trackId: String
}

"""The fields on `definition` to look up the row to connect."""
input DefinitionDefinitionsIdProtocolIdUniqueConnect {
  id: String!
  protocolId: String!
}

"""The fields on `definition` to look up the row to delete."""
input DefinitionDefinitionsIdProtocolIdUniqueDelete {
  id: String!
  protocolId: String!
}

"""The fields on `definition` to look up the row to connect."""
input DefinitionDefinitionsPkeyConnect {
  id: String!
}

"""The fields on `definition` to look up the row to delete."""
input DefinitionDefinitionsPkeyDelete {
  id: String!
}

"""
A filter to be used against `Definition` object types. All fields are combined with a logical ‘and.’
"""
input DefinitionFilter {
  """Checks for all expressions in this list."""
  and: [DefinitionFilter!]

  """Filter by the object’s `definition` field."""
  definition: StringFilter

  """Filter by the object’s `earnedBadgesByDefinitionIdList` relation."""
  earnedBadgesByDefinitionIdList: DefinitionToManyEarnedBadgeFilter

  """Some related `earnedBadgesByDefinitionIdList` exist."""
  earnedBadgesByDefinitionIdListExist: Boolean

  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `ipfsUri` field."""
  ipfsUri: StringFilter

  """Filter by the object’s `metric` field."""
  metric: StringFilter

  """Negates the expression."""
  not: DefinitionFilter

  """Checks for any expressions in this list."""
  or: [DefinitionFilter!]

  """Filter by the object’s `protocolByProtocolId` relation."""
  protocolByProtocolId: ProtocolFilter

  """Filter by the object’s `protocolId` field."""
  protocolId: StringFilter

  """Filter by the object’s `roleByRoleId` relation."""
  roleByRoleId: RoleFilter

  """A related `roleByRoleId` exists."""
  roleByRoleIdExists: Boolean

  """Filter by the object’s `roleId` field."""
  roleId: StringFilter

  """Filter by the object’s `threshold` field."""
  threshold: StringFilter

  """Filter by the object’s `trackByTrackId` relation."""
  trackByTrackId: TrackFilter

  """Filter by the object’s `trackId` field."""
  trackId: StringFilter
}

"""An input for mutations affecting `Definition`"""
input DefinitionInput {
  definition: String
  earnedBadgesUsingId: EarnedBadgesDefinitionIdForeignInverseInput
  id: String!
  ipfsUri: String
  metric: String
  protocolId: String
  protocolToProtocolId: DefinitionsProtocolIdForeignInput
  roleId: String
  roleToRoleId: DefinitionsRoleIdForeignInput
  threshold: String
  trackId: String
  trackToTrackId: DefinitionsTrackIdForeignInput
}

"""The globally unique `ID` look up for the row to connect."""
input DefinitionNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `definition` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input DefinitionNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `definition` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input DefinitionOnDefinitionForDefinitionsProtocolIdForeignNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `protocol` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `protocol` being updated.
  """
  protocolPatch: ProtocolPatch!
}

"""The fields on `definition` to look up the row to update."""
input DefinitionOnDefinitionForDefinitionsProtocolIdForeignUsingDefinitionsIdProtocolIdUniqueUpdate {
  """
  An object where the defined keys will be set on the `definition` being updated.
  """
  definitionPatch: updateDefinitionOnDefinitionForDefinitionsProtocolIdForeignPatch!
  id: String!
  protocolId: String!
}

"""The fields on `definition` to look up the row to update."""
input DefinitionOnDefinitionForDefinitionsProtocolIdForeignUsingDefinitionsPkeyUpdate {
  """
  An object where the defined keys will be set on the `definition` being updated.
  """
  definitionPatch: updateDefinitionOnDefinitionForDefinitionsProtocolIdForeignPatch!
  id: String!
}

"""The globally unique `ID` look up for the row to update."""
input DefinitionOnDefinitionForDefinitionsRoleIdForeignNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `role` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `role` being updated.
  """
  rolePatch: RolePatch!
}

"""The fields on `definition` to look up the row to update."""
input DefinitionOnDefinitionForDefinitionsRoleIdForeignUsingDefinitionsIdProtocolIdUniqueUpdate {
  """
  An object where the defined keys will be set on the `definition` being updated.
  """
  definitionPatch: updateDefinitionOnDefinitionForDefinitionsRoleIdForeignPatch!
  id: String!
  protocolId: String!
}

"""The fields on `definition` to look up the row to update."""
input DefinitionOnDefinitionForDefinitionsRoleIdForeignUsingDefinitionsPkeyUpdate {
  """
  An object where the defined keys will be set on the `definition` being updated.
  """
  definitionPatch: updateDefinitionOnDefinitionForDefinitionsRoleIdForeignPatch!
  id: String!
}

"""The globally unique `ID` look up for the row to update."""
input DefinitionOnDefinitionForDefinitionsTrackIdForeignNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `track` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `track` being updated.
  """
  trackPatch: TrackPatch!
}

"""The fields on `definition` to look up the row to update."""
input DefinitionOnDefinitionForDefinitionsTrackIdForeignUsingDefinitionsIdProtocolIdUniqueUpdate {
  """
  An object where the defined keys will be set on the `definition` being updated.
  """
  definitionPatch: updateDefinitionOnDefinitionForDefinitionsTrackIdForeignPatch!
  id: String!
  protocolId: String!
}

"""The fields on `definition` to look up the row to update."""
input DefinitionOnDefinitionForDefinitionsTrackIdForeignUsingDefinitionsPkeyUpdate {
  """
  An object where the defined keys will be set on the `definition` being updated.
  """
  definitionPatch: updateDefinitionOnDefinitionForDefinitionsTrackIdForeignPatch!
  id: String!
}

"""The globally unique `ID` look up for the row to update."""
input DefinitionOnEarnedBadgeForEarnedBadgesDefinitionIdForeignNodeIdUpdate {
  """
  An object where the defined keys will be set on the `earnedBadge` being updated.
  """
  earnedBadgePatch: EarnedBadgePatch!

  """
  The globally unique `ID` which identifies a single `earnedBadge` to be connected.
  """
  nodeId: ID!
}

"""The fields on `definition` to look up the row to update."""
input DefinitionOnEarnedBadgeForEarnedBadgesDefinitionIdForeignUsingDefinitionsIdProtocolIdUniqueUpdate {
  """
  An object where the defined keys will be set on the `definition` being updated.
  """
  definitionPatch: updateDefinitionOnEarnedBadgeForEarnedBadgesDefinitionIdForeignPatch!
  id: String!
  protocolId: String!
}

"""The fields on `definition` to look up the row to update."""
input DefinitionOnEarnedBadgeForEarnedBadgesDefinitionIdForeignUsingDefinitionsPkeyUpdate {
  """
  An object where the defined keys will be set on the `definition` being updated.
  """
  definitionPatch: updateDefinitionOnEarnedBadgeForEarnedBadgesDefinitionIdForeignPatch!
  id: String!
}

"""
Represents an update to a `Definition`. Fields that are set will be updated.
"""
input DefinitionPatch {
  definition: String
  earnedBadgesUsingId: EarnedBadgesDefinitionIdForeignInverseInput
  id: String
  ipfsUri: String
  metric: String
  protocolId: String
  protocolToProtocolId: DefinitionsProtocolIdForeignInput
  roleId: String
  roleToRoleId: DefinitionsRoleIdForeignInput
  threshold: String
  trackId: String
  trackToTrackId: DefinitionsTrackIdForeignInput
}

"""
A filter to be used against many `EarnedBadge` object types. All fields are combined with a logical ‘and.’
"""
input DefinitionToManyEarnedBadgeFilter {
  """
  Every related `EarnedBadge` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EarnedBadgeFilter

  """
  No related `EarnedBadge` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EarnedBadgeFilter

  """
  Some related `EarnedBadge` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EarnedBadgeFilter
}

"""Methods to use when ordering `Definition`."""
enum DefinitionsOrderBy {
  DEFINITION_ASC
  DEFINITION_DESC
  ID_ASC
  ID_DESC
  IPFS_URI_ASC
  IPFS_URI_DESC
  METRIC_ASC
  METRIC_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROTOCOL_ID_ASC
  PROTOCOL_ID_DESC
  ROLE_ID_ASC
  ROLE_ID_DESC
  THRESHOLD_ASC
  THRESHOLD_DESC
  TRACK_ID_ASC
  TRACK_ID_DESC
}

"""The `definition` to be created by this mutation."""
input DefinitionsProtocolIdForeignDefinitionsCreateInput {
  definition: String
  earnedBadgesUsingId: EarnedBadgesDefinitionIdForeignInverseInput
  id: String!
  ipfsUri: String
  metric: String
  protocolToProtocolId: DefinitionsProtocolIdForeignInput
  roleId: String
  roleToRoleId: DefinitionsRoleIdForeignInput
  threshold: String
  trackId: String
  trackToTrackId: DefinitionsTrackIdForeignInput
}

"""
Input for the nested mutation of `protocol` in the `DefinitionInput` mutation.
"""
input DefinitionsProtocolIdForeignInput {
  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  connectById: ProtocolProtocolsPkeyConnect

  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  connectByNodeId: ProtocolNodeIdConnect

  """
  A `ProtocolInput` object that will be created and connected to this object.
  """
  create: DefinitionsProtocolIdForeignProtocolsCreateInput

  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  deleteById: ProtocolProtocolsPkeyDelete

  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  deleteByNodeId: ProtocolNodeIdDelete

  """
  The primary key(s) and patch data for `protocol` for the far side of the relationship.
  """
  updateById: ProtocolOnDefinitionForDefinitionsProtocolIdForeignUsingProtocolsPkeyUpdate

  """
  The primary key(s) and patch data for `protocol` for the far side of the relationship.
  """
  updateByNodeId: DefinitionOnDefinitionForDefinitionsProtocolIdForeignNodeIdUpdate
}

"""
Input for the nested mutation of `definition` in the `ProtocolInput` mutation.
"""
input DefinitionsProtocolIdForeignInverseInput {
  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  connectById: [DefinitionDefinitionsPkeyConnect!]

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  connectByIdAndProtocolId: [DefinitionDefinitionsIdProtocolIdUniqueConnect!]

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  connectByNodeId: [DefinitionNodeIdConnect!]

  """
  A `DefinitionInput` object that will be created and connected to this object.
  """
  create: [DefinitionsProtocolIdForeignDefinitionsCreateInput!]

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  deleteById: [DefinitionDefinitionsPkeyDelete!]

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  deleteByIdAndProtocolId: [DefinitionDefinitionsIdProtocolIdUniqueDelete!]

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  deleteByNodeId: [DefinitionNodeIdDelete!]

  """
  Flag indicating whether all other `definition` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) and patch data for `definition` for the far side of the relationship.
  """
  updateById: [DefinitionOnDefinitionForDefinitionsProtocolIdForeignUsingDefinitionsPkeyUpdate!]

  """
  The primary key(s) and patch data for `definition` for the far side of the relationship.
  """
  updateByIdAndProtocolId: [DefinitionOnDefinitionForDefinitionsProtocolIdForeignUsingDefinitionsIdProtocolIdUniqueUpdate!]

  """
  The primary key(s) and patch data for `definition` for the far side of the relationship.
  """
  updateByNodeId: [ProtocolOnDefinitionForDefinitionsProtocolIdForeignNodeIdUpdate!]
}

"""The `protocol` to be created by this mutation."""
input DefinitionsProtocolIdForeignProtocolsCreateInput {
  definitionsUsingId: DefinitionsProtocolIdForeignInverseInput
  earnedBadgesUsingId: EarnedBadgesProtocolIdForeignInverseInput
  id: String!
  rankingsUsingId: RankingsProtocolIdForeignInverseInput
  rolesUsingId: RolesProtocolIdForeignInverseInput
  tracksUsingId: TracksProtocolIdForeignInverseInput
}

"""The `definition` to be created by this mutation."""
input DefinitionsRoleIdForeignDefinitionsCreateInput {
  definition: String
  earnedBadgesUsingId: EarnedBadgesDefinitionIdForeignInverseInput
  id: String!
  ipfsUri: String
  metric: String
  protocolId: String
  protocolToProtocolId: DefinitionsProtocolIdForeignInput
  roleToRoleId: DefinitionsRoleIdForeignInput
  threshold: String
  trackId: String
  trackToTrackId: DefinitionsTrackIdForeignInput
}

"""
Input for the nested mutation of `role` in the `DefinitionInput` mutation.
"""
input DefinitionsRoleIdForeignInput {
  """The primary key(s) for `role` for the far side of the relationship."""
  connectById: RoleRolesPkeyConnect

  """The primary key(s) for `role` for the far side of the relationship."""
  connectByIdAndProtocolId: RoleRolesIdProtocolIdUniqueConnect

  """The primary key(s) for `role` for the far side of the relationship."""
  connectByNodeId: RoleNodeIdConnect

  """
  A `RoleInput` object that will be created and connected to this object.
  """
  create: DefinitionsRoleIdForeignRolesCreateInput

  """The primary key(s) for `role` for the far side of the relationship."""
  deleteById: RoleRolesPkeyDelete

  """The primary key(s) for `role` for the far side of the relationship."""
  deleteByIdAndProtocolId: RoleRolesIdProtocolIdUniqueDelete

  """The primary key(s) for `role` for the far side of the relationship."""
  deleteByNodeId: RoleNodeIdDelete

  """
  The primary key(s) and patch data for `role` for the far side of the relationship.
  """
  updateById: RoleOnDefinitionForDefinitionsRoleIdForeignUsingRolesPkeyUpdate

  """
  The primary key(s) and patch data for `role` for the far side of the relationship.
  """
  updateByIdAndProtocolId: RoleOnDefinitionForDefinitionsRoleIdForeignUsingRolesIdProtocolIdUniqueUpdate

  """
  The primary key(s) and patch data for `role` for the far side of the relationship.
  """
  updateByNodeId: DefinitionOnDefinitionForDefinitionsRoleIdForeignNodeIdUpdate
}

"""
Input for the nested mutation of `definition` in the `RoleInput` mutation.
"""
input DefinitionsRoleIdForeignInverseInput {
  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  connectById: [DefinitionDefinitionsPkeyConnect!]

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  connectByIdAndProtocolId: [DefinitionDefinitionsIdProtocolIdUniqueConnect!]

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  connectByNodeId: [DefinitionNodeIdConnect!]

  """
  A `DefinitionInput` object that will be created and connected to this object.
  """
  create: [DefinitionsRoleIdForeignDefinitionsCreateInput!]

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  deleteById: [DefinitionDefinitionsPkeyDelete!]

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  deleteByIdAndProtocolId: [DefinitionDefinitionsIdProtocolIdUniqueDelete!]

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  deleteByNodeId: [DefinitionNodeIdDelete!]

  """
  Flag indicating whether all other `definition` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) and patch data for `definition` for the far side of the relationship.
  """
  updateById: [DefinitionOnDefinitionForDefinitionsRoleIdForeignUsingDefinitionsPkeyUpdate!]

  """
  The primary key(s) and patch data for `definition` for the far side of the relationship.
  """
  updateByIdAndProtocolId: [DefinitionOnDefinitionForDefinitionsRoleIdForeignUsingDefinitionsIdProtocolIdUniqueUpdate!]

  """
  The primary key(s) and patch data for `definition` for the far side of the relationship.
  """
  updateByNodeId: [RoleOnDefinitionForDefinitionsRoleIdForeignNodeIdUpdate!]
}

"""The `role` to be created by this mutation."""
input DefinitionsRoleIdForeignRolesCreateInput {
  definitionsUsingId: DefinitionsRoleIdForeignInverseInput
  id: String!
  protocolId: String
  protocolToProtocolId: RolesProtocolIdForeignInput
}

"""The `definition` to be created by this mutation."""
input DefinitionsTrackIdForeignDefinitionsCreateInput {
  definition: String
  earnedBadgesUsingId: EarnedBadgesDefinitionIdForeignInverseInput
  id: String!
  ipfsUri: String
  metric: String
  protocolId: String
  protocolToProtocolId: DefinitionsProtocolIdForeignInput
  roleId: String
  roleToRoleId: DefinitionsRoleIdForeignInput
  threshold: String
  trackToTrackId: DefinitionsTrackIdForeignInput
}

"""
Input for the nested mutation of `track` in the `DefinitionInput` mutation.
"""
input DefinitionsTrackIdForeignInput {
  """The primary key(s) for `track` for the far side of the relationship."""
  connectById: TrackTracksPkeyConnect

  """The primary key(s) for `track` for the far side of the relationship."""
  connectByIdAndProtocolId: TrackTracksIdProtocolIdUniqueConnect

  """The primary key(s) for `track` for the far side of the relationship."""
  connectByNodeId: TrackNodeIdConnect

  """
  A `TrackInput` object that will be created and connected to this object.
  """
  create: DefinitionsTrackIdForeignTracksCreateInput

  """The primary key(s) for `track` for the far side of the relationship."""
  deleteById: TrackTracksPkeyDelete

  """The primary key(s) for `track` for the far side of the relationship."""
  deleteByIdAndProtocolId: TrackTracksIdProtocolIdUniqueDelete

  """The primary key(s) for `track` for the far side of the relationship."""
  deleteByNodeId: TrackNodeIdDelete

  """
  The primary key(s) and patch data for `track` for the far side of the relationship.
  """
  updateById: TrackOnDefinitionForDefinitionsTrackIdForeignUsingTracksPkeyUpdate

  """
  The primary key(s) and patch data for `track` for the far side of the relationship.
  """
  updateByIdAndProtocolId: TrackOnDefinitionForDefinitionsTrackIdForeignUsingTracksIdProtocolIdUniqueUpdate

  """
  The primary key(s) and patch data for `track` for the far side of the relationship.
  """
  updateByNodeId: DefinitionOnDefinitionForDefinitionsTrackIdForeignNodeIdUpdate
}

"""
Input for the nested mutation of `definition` in the `TrackInput` mutation.
"""
input DefinitionsTrackIdForeignInverseInput {
  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  connectById: [DefinitionDefinitionsPkeyConnect!]

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  connectByIdAndProtocolId: [DefinitionDefinitionsIdProtocolIdUniqueConnect!]

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  connectByNodeId: [DefinitionNodeIdConnect!]

  """
  A `DefinitionInput` object that will be created and connected to this object.
  """
  create: [DefinitionsTrackIdForeignDefinitionsCreateInput!]

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  deleteById: [DefinitionDefinitionsPkeyDelete!]

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  deleteByIdAndProtocolId: [DefinitionDefinitionsIdProtocolIdUniqueDelete!]

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  deleteByNodeId: [DefinitionNodeIdDelete!]

  """
  Flag indicating whether all other `definition` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) and patch data for `definition` for the far side of the relationship.
  """
  updateById: [DefinitionOnDefinitionForDefinitionsTrackIdForeignUsingDefinitionsPkeyUpdate!]

  """
  The primary key(s) and patch data for `definition` for the far side of the relationship.
  """
  updateByIdAndProtocolId: [DefinitionOnDefinitionForDefinitionsTrackIdForeignUsingDefinitionsIdProtocolIdUniqueUpdate!]

  """
  The primary key(s) and patch data for `definition` for the far side of the relationship.
  """
  updateByNodeId: [TrackOnDefinitionForDefinitionsTrackIdForeignNodeIdUpdate!]
}

"""The `track` to be created by this mutation."""
input DefinitionsTrackIdForeignTracksCreateInput {
  definitionsUsingId: DefinitionsTrackIdForeignInverseInput
  id: String!
  protocolId: String
  protocolToProtocolId: TracksProtocolIdForeignInput
}

"""All input for the `deleteAwardById` mutation."""
input DeleteAwardByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteAward` mutation."""
input DeleteAwardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Award` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Award` mutation."""
type DeleteAwardPayload {
  """The `Award` that was deleted by this mutation."""
  award: Award

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAwardId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteDefinitionByIdAndProtocolId` mutation."""
input DeleteDefinitionByIdAndProtocolIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
  protocolId: String!
}

"""All input for the `deleteDefinitionById` mutation."""
input DeleteDefinitionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `deleteDefinition` mutation."""
input DeleteDefinitionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Definition` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Definition` mutation."""
type DeleteDefinitionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Definition` that was deleted by this mutation."""
  definition: Definition
  deletedDefinitionId: ID

  """Reads a single `Protocol` that is related to this `Definition`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Role` that is related to this `Definition`."""
  roleByRoleId: Role

  """Reads a single `Track` that is related to this `Definition`."""
  trackByTrackId: Track
}

"""All input for the `deleteEarnedBadgeById` mutation."""
input DeleteEarnedBadgeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `deleteEarnedBadge` mutation."""
input DeleteEarnedBadgeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EarnedBadge` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `EarnedBadge` mutation."""
type DeleteEarnedBadgePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Definition` that is related to this `EarnedBadge`."""
  definitionByDefinitionId: Definition
  deletedEarnedBadgeId: ID

  """The `EarnedBadge` that was deleted by this mutation."""
  earnedBadge: EarnedBadge

  """Reads a single `Protocol` that is related to this `EarnedBadge`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Winner` that is related to this `EarnedBadge`."""
  winnerByWinnerId: Winner
}

"""All input for the `deleteKnexMigrationById` mutation."""
input DeleteKnexMigrationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteKnexMigration` mutation."""
input DeleteKnexMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `KnexMigration` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `KnexMigration` mutation."""
type DeleteKnexMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedKnexMigrationId: ID

  """The `KnexMigration` that was deleted by this mutation."""
  knexMigration: KnexMigration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteKnexMigrationsLockByIndex` mutation."""
input DeleteKnexMigrationsLockByIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  index: Int!
}

"""All input for the `deleteKnexMigrationsLock` mutation."""
input DeleteKnexMigrationsLockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `KnexMigrationsLock` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `KnexMigrationsLock` mutation."""
type DeleteKnexMigrationsLockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedKnexMigrationsLockId: ID

  """The `KnexMigrationsLock` that was deleted by this mutation."""
  knexMigrationsLock: KnexMigrationsLock

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProtocolById` mutation."""
input DeleteProtocolByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `deleteProtocol` mutation."""
input DeleteProtocolInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Protocol` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Protocol` mutation."""
type DeleteProtocolPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProtocolId: ID

  """The `Protocol` that was deleted by this mutation."""
  protocol: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteRankingById` mutation."""
input DeleteRankingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteRanking` mutation."""
input DeleteRankingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Ranking` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Ranking` mutation."""
type DeleteRankingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRankingId: ID

  """Reads a single `Protocol` that is related to this `Ranking`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Ranking` that was deleted by this mutation."""
  ranking: Ranking

  """Reads a single `Winner` that is related to this `Ranking`."""
  winnerByWinnerId: Winner
}

"""All input for the `deleteRoleByIdAndProtocolId` mutation."""
input DeleteRoleByIdAndProtocolIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
  protocolId: String!
}

"""All input for the `deleteRoleById` mutation."""
input DeleteRoleByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `deleteRole` mutation."""
input DeleteRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Role` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Role` mutation."""
type DeleteRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRoleId: ID

  """Reads a single `Protocol` that is related to this `Role`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Role` that was deleted by this mutation."""
  role: Role
}

"""All input for the `deleteTrackByIdAndProtocolId` mutation."""
input DeleteTrackByIdAndProtocolIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
  protocolId: String!
}

"""All input for the `deleteTrackById` mutation."""
input DeleteTrackByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `deleteTrack` mutation."""
input DeleteTrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Track` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Track` mutation."""
type DeleteTrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTrackId: ID

  """Reads a single `Protocol` that is related to this `Track`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Track` that was deleted by this mutation."""
  track: Track
}

"""All input for the `deleteWinnerById` mutation."""
input DeleteWinnerByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `deleteWinner` mutation."""
input DeleteWinnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Winner` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Winner` mutation."""
type DeleteWinnerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedWinnerId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Winner` that was deleted by this mutation."""
  winner: Winner
}

type EarnedBadge implements Node {
  awardNumber: Int
  blockAwarded: Int

  """Reads a single `Definition` that is related to this `EarnedBadge`."""
  definitionByDefinitionId: Definition
  definitionId: String!
  globalAwardNumber: Int
  id: String!
  metadata: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Protocol` that is related to this `EarnedBadge`."""
  protocolByProtocolId: Protocol
  protocolId: String!
  timestampAwarded: Int
  transactionHash: String

  """Reads a single `Winner` that is related to this `EarnedBadge`."""
  winnerByWinnerId: Winner
  winnerId: String!
}

"""
A condition to be used against `EarnedBadge` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EarnedBadgeCondition {
  """Checks for equality with the object’s `awardNumber` field."""
  awardNumber: Int

  """Checks for equality with the object’s `blockAwarded` field."""
  blockAwarded: Int

  """Checks for equality with the object’s `definitionId` field."""
  definitionId: String

  """Checks for equality with the object’s `globalAwardNumber` field."""
  globalAwardNumber: Int

  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `metadata` field."""
  metadata: JSON

  """Checks for equality with the object’s `protocolId` field."""
  protocolId: String

  """Checks for equality with the object’s `timestampAwarded` field."""
  timestampAwarded: Int

  """Checks for equality with the object’s `transactionHash` field."""
  transactionHash: String

  """Checks for equality with the object’s `winnerId` field."""
  winnerId: String
}

"""The fields on `earnedBadge` to look up the row to connect."""
input EarnedBadgeEarnedBadgesPkeyConnect {
  id: String!
}

"""The fields on `earnedBadge` to look up the row to delete."""
input EarnedBadgeEarnedBadgesPkeyDelete {
  id: String!
}

"""
A filter to be used against `EarnedBadge` object types. All fields are combined with a logical ‘and.’
"""
input EarnedBadgeFilter {
  """Checks for all expressions in this list."""
  and: [EarnedBadgeFilter!]

  """Filter by the object’s `awardNumber` field."""
  awardNumber: IntFilter

  """Filter by the object’s `blockAwarded` field."""
  blockAwarded: IntFilter

  """Filter by the object’s `definitionByDefinitionId` relation."""
  definitionByDefinitionId: DefinitionFilter

  """Filter by the object’s `definitionId` field."""
  definitionId: StringFilter

  """Filter by the object’s `globalAwardNumber` field."""
  globalAwardNumber: IntFilter

  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `metadata` field."""
  metadata: JSONFilter

  """Negates the expression."""
  not: EarnedBadgeFilter

  """Checks for any expressions in this list."""
  or: [EarnedBadgeFilter!]

  """Filter by the object’s `protocolByProtocolId` relation."""
  protocolByProtocolId: ProtocolFilter

  """Filter by the object’s `protocolId` field."""
  protocolId: StringFilter

  """Filter by the object’s `timestampAwarded` field."""
  timestampAwarded: IntFilter

  """Filter by the object’s `transactionHash` field."""
  transactionHash: StringFilter

  """Filter by the object’s `winnerByWinnerId` relation."""
  winnerByWinnerId: WinnerFilter

  """Filter by the object’s `winnerId` field."""
  winnerId: StringFilter
}

"""An input for mutations affecting `EarnedBadge`"""
input EarnedBadgeInput {
  awardNumber: Int
  blockAwarded: Int
  definitionId: String
  definitionToDefinitionId: EarnedBadgesDefinitionIdForeignInput
  globalAwardNumber: Int
  id: String!
  metadata: JSON
  protocolId: String
  protocolToProtocolId: EarnedBadgesProtocolIdForeignInput
  timestampAwarded: Int
  transactionHash: String
  winnerId: String
  winnerToWinnerId: EarnedBadgesWinnerIdForeignInput
}

"""The globally unique `ID` look up for the row to connect."""
input EarnedBadgeNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `earnedBadge` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input EarnedBadgeNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `earnedBadge` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input EarnedBadgeOnEarnedBadgeForEarnedBadgesDefinitionIdForeignNodeIdUpdate {
  """
  An object where the defined keys will be set on the `definition` being updated.
  """
  definitionPatch: DefinitionPatch!

  """
  The globally unique `ID` which identifies a single `definition` to be connected.
  """
  nodeId: ID!
}

"""The fields on `earnedBadge` to look up the row to update."""
input EarnedBadgeOnEarnedBadgeForEarnedBadgesDefinitionIdForeignUsingEarnedBadgesPkeyUpdate {
  """
  An object where the defined keys will be set on the `earnedBadge` being updated.
  """
  earnedBadgePatch: updateEarnedBadgeOnEarnedBadgeForEarnedBadgesDefinitionIdForeignPatch!
  id: String!
}

"""The globally unique `ID` look up for the row to update."""
input EarnedBadgeOnEarnedBadgeForEarnedBadgesProtocolIdForeignNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `protocol` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `protocol` being updated.
  """
  protocolPatch: ProtocolPatch!
}

"""The fields on `earnedBadge` to look up the row to update."""
input EarnedBadgeOnEarnedBadgeForEarnedBadgesProtocolIdForeignUsingEarnedBadgesPkeyUpdate {
  """
  An object where the defined keys will be set on the `earnedBadge` being updated.
  """
  earnedBadgePatch: updateEarnedBadgeOnEarnedBadgeForEarnedBadgesProtocolIdForeignPatch!
  id: String!
}

"""The globally unique `ID` look up for the row to update."""
input EarnedBadgeOnEarnedBadgeForEarnedBadgesWinnerIdForeignNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `winner` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `winner` being updated.
  """
  winnerPatch: WinnerPatch!
}

"""The fields on `earnedBadge` to look up the row to update."""
input EarnedBadgeOnEarnedBadgeForEarnedBadgesWinnerIdForeignUsingEarnedBadgesPkeyUpdate {
  """
  An object where the defined keys will be set on the `earnedBadge` being updated.
  """
  earnedBadgePatch: updateEarnedBadgeOnEarnedBadgeForEarnedBadgesWinnerIdForeignPatch!
  id: String!
}

"""
Represents an update to a `EarnedBadge`. Fields that are set will be updated.
"""
input EarnedBadgePatch {
  awardNumber: Int
  blockAwarded: Int
  definitionId: String
  definitionToDefinitionId: EarnedBadgesDefinitionIdForeignInput
  globalAwardNumber: Int
  id: String
  metadata: JSON
  protocolId: String
  protocolToProtocolId: EarnedBadgesProtocolIdForeignInput
  timestampAwarded: Int
  transactionHash: String
  winnerId: String
  winnerToWinnerId: EarnedBadgesWinnerIdForeignInput
}

"""The `definition` to be created by this mutation."""
input EarnedBadgesDefinitionIdForeignDefinitionsCreateInput {
  definition: String
  earnedBadgesUsingId: EarnedBadgesDefinitionIdForeignInverseInput
  id: String!
  ipfsUri: String
  metric: String
  protocolId: String
  protocolToProtocolId: DefinitionsProtocolIdForeignInput
  roleId: String
  roleToRoleId: DefinitionsRoleIdForeignInput
  threshold: String
  trackId: String
  trackToTrackId: DefinitionsTrackIdForeignInput
}

"""The `earnedBadge` to be created by this mutation."""
input EarnedBadgesDefinitionIdForeignEarnedBadgesCreateInput {
  awardNumber: Int
  blockAwarded: Int
  definitionToDefinitionId: EarnedBadgesDefinitionIdForeignInput
  globalAwardNumber: Int
  id: String!
  metadata: JSON
  protocolId: String
  protocolToProtocolId: EarnedBadgesProtocolIdForeignInput
  timestampAwarded: Int
  transactionHash: String
  winnerId: String
  winnerToWinnerId: EarnedBadgesWinnerIdForeignInput
}

"""
Input for the nested mutation of `definition` in the `EarnedBadgeInput` mutation.
"""
input EarnedBadgesDefinitionIdForeignInput {
  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  connectById: DefinitionDefinitionsPkeyConnect

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  connectByIdAndProtocolId: DefinitionDefinitionsIdProtocolIdUniqueConnect

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  connectByNodeId: DefinitionNodeIdConnect

  """
  A `DefinitionInput` object that will be created and connected to this object.
  """
  create: EarnedBadgesDefinitionIdForeignDefinitionsCreateInput

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  deleteById: DefinitionDefinitionsPkeyDelete

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  deleteByIdAndProtocolId: DefinitionDefinitionsIdProtocolIdUniqueDelete

  """
  The primary key(s) for `definition` for the far side of the relationship.
  """
  deleteByNodeId: DefinitionNodeIdDelete

  """
  The primary key(s) and patch data for `definition` for the far side of the relationship.
  """
  updateById: DefinitionOnEarnedBadgeForEarnedBadgesDefinitionIdForeignUsingDefinitionsPkeyUpdate

  """
  The primary key(s) and patch data for `definition` for the far side of the relationship.
  """
  updateByIdAndProtocolId: DefinitionOnEarnedBadgeForEarnedBadgesDefinitionIdForeignUsingDefinitionsIdProtocolIdUniqueUpdate

  """
  The primary key(s) and patch data for `definition` for the far side of the relationship.
  """
  updateByNodeId: EarnedBadgeOnEarnedBadgeForEarnedBadgesDefinitionIdForeignNodeIdUpdate
}

"""
Input for the nested mutation of `earnedBadge` in the `DefinitionInput` mutation.
"""
input EarnedBadgesDefinitionIdForeignInverseInput {
  """
  The primary key(s) for `earnedBadge` for the far side of the relationship.
  """
  connectById: [EarnedBadgeEarnedBadgesPkeyConnect!]

  """
  The primary key(s) for `earnedBadge` for the far side of the relationship.
  """
  connectByNodeId: [EarnedBadgeNodeIdConnect!]

  """
  A `EarnedBadgeInput` object that will be created and connected to this object.
  """
  create: [EarnedBadgesDefinitionIdForeignEarnedBadgesCreateInput!]

  """
  The primary key(s) for `earnedBadge` for the far side of the relationship.
  """
  deleteById: [EarnedBadgeEarnedBadgesPkeyDelete!]

  """
  The primary key(s) for `earnedBadge` for the far side of the relationship.
  """
  deleteByNodeId: [EarnedBadgeNodeIdDelete!]

  """
  Flag indicating whether all other `earnedBadge` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) and patch data for `earnedBadge` for the far side of the relationship.
  """
  updateById: [EarnedBadgeOnEarnedBadgeForEarnedBadgesDefinitionIdForeignUsingEarnedBadgesPkeyUpdate!]

  """
  The primary key(s) and patch data for `earnedBadge` for the far side of the relationship.
  """
  updateByNodeId: [DefinitionOnEarnedBadgeForEarnedBadgesDefinitionIdForeignNodeIdUpdate!]
}

"""Methods to use when ordering `EarnedBadge`."""
enum EarnedBadgesOrderBy {
  AWARD_NUMBER_ASC
  AWARD_NUMBER_DESC
  BLOCK_AWARDED_ASC
  BLOCK_AWARDED_DESC
  DEFINITION_ID_ASC
  DEFINITION_ID_DESC
  GLOBAL_AWARD_NUMBER_ASC
  GLOBAL_AWARD_NUMBER_DESC
  ID_ASC
  ID_DESC
  METADATA_ASC
  METADATA_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROTOCOL_ID_ASC
  PROTOCOL_ID_DESC
  TIMESTAMP_AWARDED_ASC
  TIMESTAMP_AWARDED_DESC
  TRANSACTION_HASH_ASC
  TRANSACTION_HASH_DESC
  WINNER_ID_ASC
  WINNER_ID_DESC
}

"""The `earnedBadge` to be created by this mutation."""
input EarnedBadgesProtocolIdForeignEarnedBadgesCreateInput {
  awardNumber: Int
  blockAwarded: Int
  definitionId: String
  definitionToDefinitionId: EarnedBadgesDefinitionIdForeignInput
  globalAwardNumber: Int
  id: String!
  metadata: JSON
  protocolToProtocolId: EarnedBadgesProtocolIdForeignInput
  timestampAwarded: Int
  transactionHash: String
  winnerId: String
  winnerToWinnerId: EarnedBadgesWinnerIdForeignInput
}

"""
Input for the nested mutation of `protocol` in the `EarnedBadgeInput` mutation.
"""
input EarnedBadgesProtocolIdForeignInput {
  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  connectById: ProtocolProtocolsPkeyConnect

  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  connectByNodeId: ProtocolNodeIdConnect

  """
  A `ProtocolInput` object that will be created and connected to this object.
  """
  create: EarnedBadgesProtocolIdForeignProtocolsCreateInput

  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  deleteById: ProtocolProtocolsPkeyDelete

  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  deleteByNodeId: ProtocolNodeIdDelete

  """
  The primary key(s) and patch data for `protocol` for the far side of the relationship.
  """
  updateById: ProtocolOnEarnedBadgeForEarnedBadgesProtocolIdForeignUsingProtocolsPkeyUpdate

  """
  The primary key(s) and patch data for `protocol` for the far side of the relationship.
  """
  updateByNodeId: EarnedBadgeOnEarnedBadgeForEarnedBadgesProtocolIdForeignNodeIdUpdate
}

"""
Input for the nested mutation of `earnedBadge` in the `ProtocolInput` mutation.
"""
input EarnedBadgesProtocolIdForeignInverseInput {
  """
  The primary key(s) for `earnedBadge` for the far side of the relationship.
  """
  connectById: [EarnedBadgeEarnedBadgesPkeyConnect!]

  """
  The primary key(s) for `earnedBadge` for the far side of the relationship.
  """
  connectByNodeId: [EarnedBadgeNodeIdConnect!]

  """
  A `EarnedBadgeInput` object that will be created and connected to this object.
  """
  create: [EarnedBadgesProtocolIdForeignEarnedBadgesCreateInput!]

  """
  The primary key(s) for `earnedBadge` for the far side of the relationship.
  """
  deleteById: [EarnedBadgeEarnedBadgesPkeyDelete!]

  """
  The primary key(s) for `earnedBadge` for the far side of the relationship.
  """
  deleteByNodeId: [EarnedBadgeNodeIdDelete!]

  """
  Flag indicating whether all other `earnedBadge` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) and patch data for `earnedBadge` for the far side of the relationship.
  """
  updateById: [EarnedBadgeOnEarnedBadgeForEarnedBadgesProtocolIdForeignUsingEarnedBadgesPkeyUpdate!]

  """
  The primary key(s) and patch data for `earnedBadge` for the far side of the relationship.
  """
  updateByNodeId: [ProtocolOnEarnedBadgeForEarnedBadgesProtocolIdForeignNodeIdUpdate!]
}

"""The `protocol` to be created by this mutation."""
input EarnedBadgesProtocolIdForeignProtocolsCreateInput {
  definitionsUsingId: DefinitionsProtocolIdForeignInverseInput
  earnedBadgesUsingId: EarnedBadgesProtocolIdForeignInverseInput
  id: String!
  rankingsUsingId: RankingsProtocolIdForeignInverseInput
  rolesUsingId: RolesProtocolIdForeignInverseInput
  tracksUsingId: TracksProtocolIdForeignInverseInput
}

"""The `earnedBadge` to be created by this mutation."""
input EarnedBadgesWinnerIdForeignEarnedBadgesCreateInput {
  awardNumber: Int
  blockAwarded: Int
  definitionId: String
  definitionToDefinitionId: EarnedBadgesDefinitionIdForeignInput
  globalAwardNumber: Int
  id: String!
  metadata: JSON
  protocolId: String
  protocolToProtocolId: EarnedBadgesProtocolIdForeignInput
  timestampAwarded: Int
  transactionHash: String
  winnerToWinnerId: EarnedBadgesWinnerIdForeignInput
}

"""
Input for the nested mutation of `winner` in the `EarnedBadgeInput` mutation.
"""
input EarnedBadgesWinnerIdForeignInput {
  """The primary key(s) for `winner` for the far side of the relationship."""
  connectById: WinnerWinnersPkeyConnect

  """The primary key(s) for `winner` for the far side of the relationship."""
  connectByNodeId: WinnerNodeIdConnect

  """
  A `WinnerInput` object that will be created and connected to this object.
  """
  create: EarnedBadgesWinnerIdForeignWinnersCreateInput

  """The primary key(s) for `winner` for the far side of the relationship."""
  deleteById: WinnerWinnersPkeyDelete

  """The primary key(s) for `winner` for the far side of the relationship."""
  deleteByNodeId: WinnerNodeIdDelete

  """
  The primary key(s) and patch data for `winner` for the far side of the relationship.
  """
  updateById: WinnerOnEarnedBadgeForEarnedBadgesWinnerIdForeignUsingWinnersPkeyUpdate

  """
  The primary key(s) and patch data for `winner` for the far side of the relationship.
  """
  updateByNodeId: EarnedBadgeOnEarnedBadgeForEarnedBadgesWinnerIdForeignNodeIdUpdate
}

"""
Input for the nested mutation of `earnedBadge` in the `WinnerInput` mutation.
"""
input EarnedBadgesWinnerIdForeignInverseInput {
  """
  The primary key(s) for `earnedBadge` for the far side of the relationship.
  """
  connectById: [EarnedBadgeEarnedBadgesPkeyConnect!]

  """
  The primary key(s) for `earnedBadge` for the far side of the relationship.
  """
  connectByNodeId: [EarnedBadgeNodeIdConnect!]

  """
  A `EarnedBadgeInput` object that will be created and connected to this object.
  """
  create: [EarnedBadgesWinnerIdForeignEarnedBadgesCreateInput!]

  """
  The primary key(s) for `earnedBadge` for the far side of the relationship.
  """
  deleteById: [EarnedBadgeEarnedBadgesPkeyDelete!]

  """
  The primary key(s) for `earnedBadge` for the far side of the relationship.
  """
  deleteByNodeId: [EarnedBadgeNodeIdDelete!]

  """
  Flag indicating whether all other `earnedBadge` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) and patch data for `earnedBadge` for the far side of the relationship.
  """
  updateById: [EarnedBadgeOnEarnedBadgeForEarnedBadgesWinnerIdForeignUsingEarnedBadgesPkeyUpdate!]

  """
  The primary key(s) and patch data for `earnedBadge` for the far side of the relationship.
  """
  updateByNodeId: [WinnerOnEarnedBadgeForEarnedBadgesWinnerIdForeignNodeIdUpdate!]
}

"""The `winner` to be created by this mutation."""
input EarnedBadgesWinnerIdForeignWinnersCreateInput {
  earnedBadgesUsingId: EarnedBadgesWinnerIdForeignInverseInput
  ens: String
  id: String!
  rankingsUsingId: RankingsWinnerIdForeignInverseInput
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """Contained by the specified JSON."""
  containedBy: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contains the specified key."""
  containsKey: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value."""
  equalTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Included in the specified list."""
  in: [JSON!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """Not included in the specified list."""
  notIn: [JSON!]
}

type KnexMigration implements Node {
  batch: Int
  id: Int!
  migrationTime: Datetime
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `KnexMigration` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input KnexMigrationCondition {
  """Checks for equality with the object’s `batch` field."""
  batch: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `migrationTime` field."""
  migrationTime: Datetime

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A filter to be used against `KnexMigration` object types. All fields are combined with a logical ‘and.’
"""
input KnexMigrationFilter {
  """Checks for all expressions in this list."""
  and: [KnexMigrationFilter!]

  """Filter by the object’s `batch` field."""
  batch: IntFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `migrationTime` field."""
  migrationTime: DatetimeFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: KnexMigrationFilter

  """Checks for any expressions in this list."""
  or: [KnexMigrationFilter!]
}

"""An input for mutations affecting `KnexMigration`"""
input KnexMigrationInput {
  batch: Int
  id: Int
  migrationTime: Datetime
  name: String
}

"""
Represents an update to a `KnexMigration`. Fields that are set will be updated.
"""
input KnexMigrationPatch {
  batch: Int
  id: Int
  migrationTime: Datetime
  name: String
}

type KnexMigrationsLock implements Node {
  index: Int!
  isLocked: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `KnexMigrationsLock` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input KnexMigrationsLockCondition {
  """Checks for equality with the object’s `index` field."""
  index: Int

  """Checks for equality with the object’s `isLocked` field."""
  isLocked: Int
}

"""
A filter to be used against `KnexMigrationsLock` object types. All fields are combined with a logical ‘and.’
"""
input KnexMigrationsLockFilter {
  """Checks for all expressions in this list."""
  and: [KnexMigrationsLockFilter!]

  """Filter by the object’s `index` field."""
  index: IntFilter

  """Filter by the object’s `isLocked` field."""
  isLocked: IntFilter

  """Negates the expression."""
  not: KnexMigrationsLockFilter

  """Checks for any expressions in this list."""
  or: [KnexMigrationsLockFilter!]
}

"""An input for mutations affecting `KnexMigrationsLock`"""
input KnexMigrationsLockInput {
  index: Int
  isLocked: Int
}

"""
Represents an update to a `KnexMigrationsLock`. Fields that are set will be updated.
"""
input KnexMigrationsLockPatch {
  index: Int
  isLocked: Int
}

"""Methods to use when ordering `KnexMigrationsLock`."""
enum KnexMigrationsLocksOrderBy {
  INDEX_ASC
  INDEX_DESC
  IS_LOCKED_ASC
  IS_LOCKED_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `KnexMigration`."""
enum KnexMigrationsOrderBy {
  BATCH_ASC
  BATCH_DESC
  ID_ASC
  ID_DESC
  MIGRATION_TIME_ASC
  MIGRATION_TIME_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Award`."""
  createAward(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAwardInput!
  ): CreateAwardPayload

  """Creates a single `Definition`."""
  createDefinition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDefinitionInput!
  ): CreateDefinitionPayload

  """Creates a single `EarnedBadge`."""
  createEarnedBadge(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEarnedBadgeInput!
  ): CreateEarnedBadgePayload

  """Creates a single `KnexMigration`."""
  createKnexMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateKnexMigrationInput!
  ): CreateKnexMigrationPayload

  """Creates a single `KnexMigrationsLock`."""
  createKnexMigrationsLock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateKnexMigrationsLockInput!
  ): CreateKnexMigrationsLockPayload

  """Creates a single `Protocol`."""
  createProtocol(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProtocolInput!
  ): CreateProtocolPayload

  """Creates a single `Ranking`."""
  createRanking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRankingInput!
  ): CreateRankingPayload

  """Creates a single `Role`."""
  createRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoleInput!
  ): CreateRolePayload

  """Creates a single `Track`."""
  createTrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTrackInput!
  ): CreateTrackPayload

  """Creates a single `Winner`."""
  createWinner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateWinnerInput!
  ): CreateWinnerPayload

  """Deletes a single `Award` using its globally unique id."""
  deleteAward(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAwardInput!
  ): DeleteAwardPayload

  """Deletes a single `Award` using a unique key."""
  deleteAwardById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAwardByIdInput!
  ): DeleteAwardPayload

  """Deletes a single `Definition` using its globally unique id."""
  deleteDefinition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDefinitionInput!
  ): DeleteDefinitionPayload

  """Deletes a single `Definition` using a unique key."""
  deleteDefinitionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDefinitionByIdInput!
  ): DeleteDefinitionPayload

  """Deletes a single `Definition` using a unique key."""
  deleteDefinitionByIdAndProtocolId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDefinitionByIdAndProtocolIdInput!
  ): DeleteDefinitionPayload

  """Deletes a single `EarnedBadge` using its globally unique id."""
  deleteEarnedBadge(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEarnedBadgeInput!
  ): DeleteEarnedBadgePayload

  """Deletes a single `EarnedBadge` using a unique key."""
  deleteEarnedBadgeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEarnedBadgeByIdInput!
  ): DeleteEarnedBadgePayload

  """Deletes a single `KnexMigration` using its globally unique id."""
  deleteKnexMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKnexMigrationInput!
  ): DeleteKnexMigrationPayload

  """Deletes a single `KnexMigration` using a unique key."""
  deleteKnexMigrationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKnexMigrationByIdInput!
  ): DeleteKnexMigrationPayload

  """Deletes a single `KnexMigrationsLock` using its globally unique id."""
  deleteKnexMigrationsLock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKnexMigrationsLockInput!
  ): DeleteKnexMigrationsLockPayload

  """Deletes a single `KnexMigrationsLock` using a unique key."""
  deleteKnexMigrationsLockByIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKnexMigrationsLockByIndexInput!
  ): DeleteKnexMigrationsLockPayload

  """Deletes a single `Protocol` using its globally unique id."""
  deleteProtocol(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProtocolInput!
  ): DeleteProtocolPayload

  """Deletes a single `Protocol` using a unique key."""
  deleteProtocolById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProtocolByIdInput!
  ): DeleteProtocolPayload

  """Deletes a single `Ranking` using its globally unique id."""
  deleteRanking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRankingInput!
  ): DeleteRankingPayload

  """Deletes a single `Ranking` using a unique key."""
  deleteRankingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRankingByIdInput!
  ): DeleteRankingPayload

  """Deletes a single `Role` using its globally unique id."""
  deleteRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleInput!
  ): DeleteRolePayload

  """Deletes a single `Role` using a unique key."""
  deleteRoleById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleByIdInput!
  ): DeleteRolePayload

  """Deletes a single `Role` using a unique key."""
  deleteRoleByIdAndProtocolId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleByIdAndProtocolIdInput!
  ): DeleteRolePayload

  """Deletes a single `Track` using its globally unique id."""
  deleteTrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTrackInput!
  ): DeleteTrackPayload

  """Deletes a single `Track` using a unique key."""
  deleteTrackById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTrackByIdInput!
  ): DeleteTrackPayload

  """Deletes a single `Track` using a unique key."""
  deleteTrackByIdAndProtocolId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTrackByIdAndProtocolIdInput!
  ): DeleteTrackPayload

  """Deletes a single `Winner` using its globally unique id."""
  deleteWinner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWinnerInput!
  ): DeleteWinnerPayload

  """Deletes a single `Winner` using a unique key."""
  deleteWinnerById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteWinnerByIdInput!
  ): DeleteWinnerPayload

  """Updates a single `Award` using its globally unique id and a patch."""
  updateAward(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAwardInput!
  ): UpdateAwardPayload

  """Updates a single `Award` using a unique key and a patch."""
  updateAwardById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAwardByIdInput!
  ): UpdateAwardPayload

  """
  Updates a single `Definition` using its globally unique id and a patch.
  """
  updateDefinition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDefinitionInput!
  ): UpdateDefinitionPayload

  """Updates a single `Definition` using a unique key and a patch."""
  updateDefinitionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDefinitionByIdInput!
  ): UpdateDefinitionPayload

  """Updates a single `Definition` using a unique key and a patch."""
  updateDefinitionByIdAndProtocolId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDefinitionByIdAndProtocolIdInput!
  ): UpdateDefinitionPayload

  """
  Updates a single `EarnedBadge` using its globally unique id and a patch.
  """
  updateEarnedBadge(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEarnedBadgeInput!
  ): UpdateEarnedBadgePayload

  """Updates a single `EarnedBadge` using a unique key and a patch."""
  updateEarnedBadgeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEarnedBadgeByIdInput!
  ): UpdateEarnedBadgePayload

  """
  Updates a single `KnexMigration` using its globally unique id and a patch.
  """
  updateKnexMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKnexMigrationInput!
  ): UpdateKnexMigrationPayload

  """Updates a single `KnexMigration` using a unique key and a patch."""
  updateKnexMigrationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKnexMigrationByIdInput!
  ): UpdateKnexMigrationPayload

  """
  Updates a single `KnexMigrationsLock` using its globally unique id and a patch.
  """
  updateKnexMigrationsLock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKnexMigrationsLockInput!
  ): UpdateKnexMigrationsLockPayload

  """Updates a single `KnexMigrationsLock` using a unique key and a patch."""
  updateKnexMigrationsLockByIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKnexMigrationsLockByIndexInput!
  ): UpdateKnexMigrationsLockPayload

  """Updates a single `Protocol` using its globally unique id and a patch."""
  updateProtocol(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProtocolInput!
  ): UpdateProtocolPayload

  """Updates a single `Protocol` using a unique key and a patch."""
  updateProtocolById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProtocolByIdInput!
  ): UpdateProtocolPayload

  """Updates a single `Ranking` using its globally unique id and a patch."""
  updateRanking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRankingInput!
  ): UpdateRankingPayload

  """Updates a single `Ranking` using a unique key and a patch."""
  updateRankingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRankingByIdInput!
  ): UpdateRankingPayload

  """Updates a single `Role` using its globally unique id and a patch."""
  updateRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleInput!
  ): UpdateRolePayload

  """Updates a single `Role` using a unique key and a patch."""
  updateRoleById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleByIdInput!
  ): UpdateRolePayload

  """Updates a single `Role` using a unique key and a patch."""
  updateRoleByIdAndProtocolId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleByIdAndProtocolIdInput!
  ): UpdateRolePayload

  """Updates a single `Track` using its globally unique id and a patch."""
  updateTrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTrackInput!
  ): UpdateTrackPayload

  """Updates a single `Track` using a unique key and a patch."""
  updateTrackById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTrackByIdInput!
  ): UpdateTrackPayload

  """Updates a single `Track` using a unique key and a patch."""
  updateTrackByIdAndProtocolId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTrackByIdAndProtocolIdInput!
  ): UpdateTrackPayload

  """Updates a single `Winner` using its globally unique id and a patch."""
  updateWinner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWinnerInput!
  ): UpdateWinnerPayload

  """Updates a single `Winner` using a unique key and a patch."""
  updateWinnerById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateWinnerByIdInput!
  ): UpdateWinnerPayload

  """Upserts a single `Award`."""
  upsertAward(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertAwardInput!
    where: UpsertAwardWhere
  ): UpsertAwardPayload

  """Upserts a single `Definition`."""
  upsertDefinition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertDefinitionInput!
    where: UpsertDefinitionWhere
  ): UpsertDefinitionPayload

  """Upserts a single `EarnedBadge`."""
  upsertEarnedBadge(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertEarnedBadgeInput!
    where: UpsertEarnedBadgeWhere
  ): UpsertEarnedBadgePayload

  """Upserts a single `KnexMigration`."""
  upsertKnexMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertKnexMigrationInput!
    where: UpsertKnexMigrationWhere
  ): UpsertKnexMigrationPayload

  """Upserts a single `KnexMigrationsLock`."""
  upsertKnexMigrationsLock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertKnexMigrationsLockInput!
    where: UpsertKnexMigrationsLockWhere
  ): UpsertKnexMigrationsLockPayload

  """Upserts a single `Protocol`."""
  upsertProtocol(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertProtocolInput!
    where: UpsertProtocolWhere
  ): UpsertProtocolPayload

  """Upserts a single `Ranking`."""
  upsertRanking(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertRankingInput!
    where: UpsertRankingWhere
  ): UpsertRankingPayload

  """Upserts a single `Role`."""
  upsertRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertRoleInput!
    where: UpsertRoleWhere
  ): UpsertRolePayload

  """Upserts a single `Track`."""
  upsertTrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertTrackInput!
    where: UpsertTrackWhere
  ): UpsertTrackPayload

  """Upserts a single `Winner`."""
  upsertWinner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertWinnerInput!
    where: UpsertWinnerWhere
  ): UpsertWinnerPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Protocol implements Node {
  """Reads and enables pagination through a set of `Definition`."""
  definitionsByProtocolIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DefinitionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DefinitionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Definition`."""
    orderBy: [DefinitionsOrderBy!]
  ): [Definition!]!

  """Reads and enables pagination through a set of `EarnedBadge`."""
  earnedBadgesByProtocolIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EarnedBadgeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EarnedBadgeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EarnedBadge`."""
    orderBy: [EarnedBadgesOrderBy!]
  ): [EarnedBadge!]!
  id: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Ranking`."""
  rankingsByProtocolIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RankingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RankingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Ranking`."""
    orderBy: [RankingsOrderBy!]
  ): [Ranking!]!

  """Reads and enables pagination through a set of `Role`."""
  rolesByProtocolIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Role`."""
    orderBy: [RolesOrderBy!]
  ): [Role!]!

  """Reads and enables pagination through a set of `Track`."""
  tracksByProtocolIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TrackCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TrackFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Track`."""
    orderBy: [TracksOrderBy!]
  ): [Track!]!
}

"""
A condition to be used against `Protocol` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ProtocolCondition {
  """Checks for equality with the object’s `id` field."""
  id: String
}

"""
A filter to be used against `Protocol` object types. All fields are combined with a logical ‘and.’
"""
input ProtocolFilter {
  """Checks for all expressions in this list."""
  and: [ProtocolFilter!]

  """Filter by the object’s `definitionsByProtocolIdList` relation."""
  definitionsByProtocolIdList: ProtocolToManyDefinitionFilter

  """Some related `definitionsByProtocolIdList` exist."""
  definitionsByProtocolIdListExist: Boolean

  """Filter by the object’s `earnedBadgesByProtocolIdList` relation."""
  earnedBadgesByProtocolIdList: ProtocolToManyEarnedBadgeFilter

  """Some related `earnedBadgesByProtocolIdList` exist."""
  earnedBadgesByProtocolIdListExist: Boolean

  """Filter by the object’s `id` field."""
  id: StringFilter

  """Negates the expression."""
  not: ProtocolFilter

  """Checks for any expressions in this list."""
  or: [ProtocolFilter!]

  """Filter by the object’s `rankingsByProtocolIdList` relation."""
  rankingsByProtocolIdList: ProtocolToManyRankingFilter

  """Some related `rankingsByProtocolIdList` exist."""
  rankingsByProtocolIdListExist: Boolean

  """Filter by the object’s `rolesByProtocolIdList` relation."""
  rolesByProtocolIdList: ProtocolToManyRoleFilter

  """Some related `rolesByProtocolIdList` exist."""
  rolesByProtocolIdListExist: Boolean

  """Filter by the object’s `tracksByProtocolIdList` relation."""
  tracksByProtocolIdList: ProtocolToManyTrackFilter

  """Some related `tracksByProtocolIdList` exist."""
  tracksByProtocolIdListExist: Boolean
}

"""An input for mutations affecting `Protocol`"""
input ProtocolInput {
  definitionsUsingId: DefinitionsProtocolIdForeignInverseInput
  earnedBadgesUsingId: EarnedBadgesProtocolIdForeignInverseInput
  id: String!
  rankingsUsingId: RankingsProtocolIdForeignInverseInput
  rolesUsingId: RolesProtocolIdForeignInverseInput
  tracksUsingId: TracksProtocolIdForeignInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input ProtocolNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `protocol` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input ProtocolNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `protocol` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input ProtocolOnDefinitionForDefinitionsProtocolIdForeignNodeIdUpdate {
  """
  An object where the defined keys will be set on the `definition` being updated.
  """
  definitionPatch: DefinitionPatch!

  """
  The globally unique `ID` which identifies a single `definition` to be connected.
  """
  nodeId: ID!
}

"""The fields on `protocol` to look up the row to update."""
input ProtocolOnDefinitionForDefinitionsProtocolIdForeignUsingProtocolsPkeyUpdate {
  id: String!

  """
  An object where the defined keys will be set on the `protocol` being updated.
  """
  protocolPatch: updateProtocolOnDefinitionForDefinitionsProtocolIdForeignPatch!
}

"""The globally unique `ID` look up for the row to update."""
input ProtocolOnEarnedBadgeForEarnedBadgesProtocolIdForeignNodeIdUpdate {
  """
  An object where the defined keys will be set on the `earnedBadge` being updated.
  """
  earnedBadgePatch: EarnedBadgePatch!

  """
  The globally unique `ID` which identifies a single `earnedBadge` to be connected.
  """
  nodeId: ID!
}

"""The fields on `protocol` to look up the row to update."""
input ProtocolOnEarnedBadgeForEarnedBadgesProtocolIdForeignUsingProtocolsPkeyUpdate {
  id: String!

  """
  An object where the defined keys will be set on the `protocol` being updated.
  """
  protocolPatch: updateProtocolOnEarnedBadgeForEarnedBadgesProtocolIdForeignPatch!
}

"""The globally unique `ID` look up for the row to update."""
input ProtocolOnRankingForRankingsProtocolIdForeignNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `ranking` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ranking` being updated.
  """
  rankingPatch: RankingPatch!
}

"""The fields on `protocol` to look up the row to update."""
input ProtocolOnRankingForRankingsProtocolIdForeignUsingProtocolsPkeyUpdate {
  id: String!

  """
  An object where the defined keys will be set on the `protocol` being updated.
  """
  protocolPatch: updateProtocolOnRankingForRankingsProtocolIdForeignPatch!
}

"""The globally unique `ID` look up for the row to update."""
input ProtocolOnRoleForRolesProtocolIdForeignNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `role` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `role` being updated.
  """
  rolePatch: RolePatch!
}

"""The fields on `protocol` to look up the row to update."""
input ProtocolOnRoleForRolesProtocolIdForeignUsingProtocolsPkeyUpdate {
  id: String!

  """
  An object where the defined keys will be set on the `protocol` being updated.
  """
  protocolPatch: updateProtocolOnRoleForRolesProtocolIdForeignPatch!
}

"""The globally unique `ID` look up for the row to update."""
input ProtocolOnTrackForTracksProtocolIdForeignNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `track` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `track` being updated.
  """
  trackPatch: TrackPatch!
}

"""The fields on `protocol` to look up the row to update."""
input ProtocolOnTrackForTracksProtocolIdForeignUsingProtocolsPkeyUpdate {
  id: String!

  """
  An object where the defined keys will be set on the `protocol` being updated.
  """
  protocolPatch: updateProtocolOnTrackForTracksProtocolIdForeignPatch!
}

"""
Represents an update to a `Protocol`. Fields that are set will be updated.
"""
input ProtocolPatch {
  definitionsUsingId: DefinitionsProtocolIdForeignInverseInput
  earnedBadgesUsingId: EarnedBadgesProtocolIdForeignInverseInput
  id: String
  rankingsUsingId: RankingsProtocolIdForeignInverseInput
  rolesUsingId: RolesProtocolIdForeignInverseInput
  tracksUsingId: TracksProtocolIdForeignInverseInput
}

"""The fields on `protocol` to look up the row to connect."""
input ProtocolProtocolsPkeyConnect {
  id: String!
}

"""The fields on `protocol` to look up the row to delete."""
input ProtocolProtocolsPkeyDelete {
  id: String!
}

"""
A filter to be used against many `Definition` object types. All fields are combined with a logical ‘and.’
"""
input ProtocolToManyDefinitionFilter {
  """
  Every related `Definition` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DefinitionFilter

  """
  No related `Definition` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DefinitionFilter

  """
  Some related `Definition` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DefinitionFilter
}

"""
A filter to be used against many `EarnedBadge` object types. All fields are combined with a logical ‘and.’
"""
input ProtocolToManyEarnedBadgeFilter {
  """
  Every related `EarnedBadge` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EarnedBadgeFilter

  """
  No related `EarnedBadge` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EarnedBadgeFilter

  """
  Some related `EarnedBadge` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EarnedBadgeFilter
}

"""
A filter to be used against many `Ranking` object types. All fields are combined with a logical ‘and.’
"""
input ProtocolToManyRankingFilter {
  """
  Every related `Ranking` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RankingFilter

  """
  No related `Ranking` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RankingFilter

  """
  Some related `Ranking` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RankingFilter
}

"""
A filter to be used against many `Role` object types. All fields are combined with a logical ‘and.’
"""
input ProtocolToManyRoleFilter {
  """
  Every related `Role` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RoleFilter

  """
  No related `Role` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RoleFilter

  """
  Some related `Role` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RoleFilter
}

"""
A filter to be used against many `Track` object types. All fields are combined with a logical ‘and.’
"""
input ProtocolToManyTrackFilter {
  """
  Every related `Track` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TrackFilter

  """
  No related `Track` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TrackFilter

  """
  Some related `Track` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TrackFilter
}

"""Methods to use when ordering `Protocol`."""
enum ProtocolsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads a set of `Award`."""
  allAwardsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AwardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AwardFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Award`."""
    orderBy: [AwardsOrderBy!]
  ): [Award!]

  """Reads a set of `Definition`."""
  allDefinitionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DefinitionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DefinitionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Definition`."""
    orderBy: [DefinitionsOrderBy!]
  ): [Definition!]

  """Reads a set of `EarnedBadge`."""
  allEarnedBadgesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EarnedBadgeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EarnedBadgeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EarnedBadge`."""
    orderBy: [EarnedBadgesOrderBy!]
  ): [EarnedBadge!]

  """Reads a set of `KnexMigration`."""
  allKnexMigrationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: KnexMigrationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: KnexMigrationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `KnexMigration`."""
    orderBy: [KnexMigrationsOrderBy!]
  ): [KnexMigration!]

  """Reads a set of `KnexMigrationsLock`."""
  allKnexMigrationsLocksList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: KnexMigrationsLockCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: KnexMigrationsLockFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `KnexMigrationsLock`."""
    orderBy: [KnexMigrationsLocksOrderBy!]
  ): [KnexMigrationsLock!]

  """Reads a set of `Protocol`."""
  allProtocolsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProtocolCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProtocolFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Protocol`."""
    orderBy: [ProtocolsOrderBy!]
  ): [Protocol!]

  """Reads a set of `Ranking`."""
  allRankingsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RankingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RankingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Ranking`."""
    orderBy: [RankingsOrderBy!]
  ): [Ranking!]

  """Reads a set of `Role`."""
  allRolesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Role`."""
    orderBy: [RolesOrderBy!]
  ): [Role!]

  """Reads a set of `Track`."""
  allTracksList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TrackCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TrackFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Track`."""
    orderBy: [TracksOrderBy!]
  ): [Track!]

  """Reads a set of `Winner`."""
  allWinnersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WinnerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: WinnerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Winner`."""
    orderBy: [WinnersOrderBy!]
  ): [Winner!]

  """Reads a single `Award` using its globally unique `ID`."""
  award(
    """The globally unique `ID` to be used in selecting a single `Award`."""
    nodeId: ID!
  ): Award
  awardById(id: Int!): Award

  """Reads a single `Definition` using its globally unique `ID`."""
  definition(
    """
    The globally unique `ID` to be used in selecting a single `Definition`.
    """
    nodeId: ID!
  ): Definition
  definitionById(id: String!): Definition
  definitionByIdAndProtocolId(id: String!, protocolId: String!): Definition

  """Reads a single `EarnedBadge` using its globally unique `ID`."""
  earnedBadge(
    """
    The globally unique `ID` to be used in selecting a single `EarnedBadge`.
    """
    nodeId: ID!
  ): EarnedBadge
  earnedBadgeById(id: String!): EarnedBadge

  """Reads a single `KnexMigration` using its globally unique `ID`."""
  knexMigration(
    """
    The globally unique `ID` to be used in selecting a single `KnexMigration`.
    """
    nodeId: ID!
  ): KnexMigration
  knexMigrationById(id: Int!): KnexMigration

  """Reads a single `KnexMigrationsLock` using its globally unique `ID`."""
  knexMigrationsLock(
    """
    The globally unique `ID` to be used in selecting a single `KnexMigrationsLock`.
    """
    nodeId: ID!
  ): KnexMigrationsLock
  knexMigrationsLockByIndex(index: Int!): KnexMigrationsLock

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Reads a single `Protocol` using its globally unique `ID`."""
  protocol(
    """The globally unique `ID` to be used in selecting a single `Protocol`."""
    nodeId: ID!
  ): Protocol
  protocolById(id: String!): Protocol

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a single `Ranking` using its globally unique `ID`."""
  ranking(
    """The globally unique `ID` to be used in selecting a single `Ranking`."""
    nodeId: ID!
  ): Ranking
  rankingById(id: Int!): Ranking

  """Reads a single `Role` using its globally unique `ID`."""
  role(
    """The globally unique `ID` to be used in selecting a single `Role`."""
    nodeId: ID!
  ): Role
  roleById(id: String!): Role
  roleByIdAndProtocolId(id: String!, protocolId: String!): Role

  """Reads a single `Track` using its globally unique `ID`."""
  track(
    """The globally unique `ID` to be used in selecting a single `Track`."""
    nodeId: ID!
  ): Track
  trackById(id: String!): Track
  trackByIdAndProtocolId(id: String!, protocolId: String!): Track

  """Reads a single `Winner` using its globally unique `ID`."""
  winner(
    """The globally unique `ID` to be used in selecting a single `Winner`."""
    nodeId: ID!
  ): Winner
  winnerById(id: String!): Winner
}

type Ranking implements Node {
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Protocol` that is related to this `Ranking`."""
  protocolByProtocolId: Protocol
  protocolId: String!
  rank: Int!

  """Reads a single `Winner` that is related to this `Ranking`."""
  winnerByWinnerId: Winner
  winnerId: String!
}

"""
A condition to be used against `Ranking` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RankingCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `protocolId` field."""
  protocolId: String

  """Checks for equality with the object’s `rank` field."""
  rank: Int

  """Checks for equality with the object’s `winnerId` field."""
  winnerId: String
}

"""
A filter to be used against `Ranking` object types. All fields are combined with a logical ‘and.’
"""
input RankingFilter {
  """Checks for all expressions in this list."""
  and: [RankingFilter!]

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Negates the expression."""
  not: RankingFilter

  """Checks for any expressions in this list."""
  or: [RankingFilter!]

  """Filter by the object’s `protocolByProtocolId` relation."""
  protocolByProtocolId: ProtocolFilter

  """Filter by the object’s `protocolId` field."""
  protocolId: StringFilter

  """Filter by the object’s `rank` field."""
  rank: IntFilter

  """Filter by the object’s `winnerByWinnerId` relation."""
  winnerByWinnerId: WinnerFilter

  """Filter by the object’s `winnerId` field."""
  winnerId: StringFilter
}

"""An input for mutations affecting `Ranking`"""
input RankingInput {
  id: Int
  protocolId: String
  protocolToProtocolId: RankingsProtocolIdForeignInput
  rank: Int!
  winnerId: String
  winnerToWinnerId: RankingsWinnerIdForeignInput
}

"""The globally unique `ID` look up for the row to connect."""
input RankingNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `ranking` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input RankingNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `ranking` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input RankingOnRankingForRankingsProtocolIdForeignNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `protocol` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `protocol` being updated.
  """
  protocolPatch: ProtocolPatch!
}

"""The fields on `ranking` to look up the row to update."""
input RankingOnRankingForRankingsProtocolIdForeignUsingRankingsPkeyUpdate {
  id: Int!

  """
  An object where the defined keys will be set on the `ranking` being updated.
  """
  rankingPatch: updateRankingOnRankingForRankingsProtocolIdForeignPatch!
}

"""The globally unique `ID` look up for the row to update."""
input RankingOnRankingForRankingsWinnerIdForeignNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `winner` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `winner` being updated.
  """
  winnerPatch: WinnerPatch!
}

"""The fields on `ranking` to look up the row to update."""
input RankingOnRankingForRankingsWinnerIdForeignUsingRankingsPkeyUpdate {
  id: Int!

  """
  An object where the defined keys will be set on the `ranking` being updated.
  """
  rankingPatch: updateRankingOnRankingForRankingsWinnerIdForeignPatch!
}

"""
Represents an update to a `Ranking`. Fields that are set will be updated.
"""
input RankingPatch {
  id: Int
  protocolId: String
  protocolToProtocolId: RankingsProtocolIdForeignInput
  rank: Int
  winnerId: String
  winnerToWinnerId: RankingsWinnerIdForeignInput
}

"""The fields on `ranking` to look up the row to connect."""
input RankingRankingsPkeyConnect {
  id: Int!
}

"""The fields on `ranking` to look up the row to delete."""
input RankingRankingsPkeyDelete {
  id: Int!
}

"""Methods to use when ordering `Ranking`."""
enum RankingsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROTOCOL_ID_ASC
  PROTOCOL_ID_DESC
  RANK_ASC
  RANK_DESC
  WINNER_ID_ASC
  WINNER_ID_DESC
}

"""
Input for the nested mutation of `protocol` in the `RankingInput` mutation.
"""
input RankingsProtocolIdForeignInput {
  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  connectById: ProtocolProtocolsPkeyConnect

  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  connectByNodeId: ProtocolNodeIdConnect

  """
  A `ProtocolInput` object that will be created and connected to this object.
  """
  create: RankingsProtocolIdForeignProtocolsCreateInput

  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  deleteById: ProtocolProtocolsPkeyDelete

  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  deleteByNodeId: ProtocolNodeIdDelete

  """
  The primary key(s) and patch data for `protocol` for the far side of the relationship.
  """
  updateById: ProtocolOnRankingForRankingsProtocolIdForeignUsingProtocolsPkeyUpdate

  """
  The primary key(s) and patch data for `protocol` for the far side of the relationship.
  """
  updateByNodeId: RankingOnRankingForRankingsProtocolIdForeignNodeIdUpdate
}

"""
Input for the nested mutation of `ranking` in the `ProtocolInput` mutation.
"""
input RankingsProtocolIdForeignInverseInput {
  """The primary key(s) for `ranking` for the far side of the relationship."""
  connectById: [RankingRankingsPkeyConnect!]

  """The primary key(s) for `ranking` for the far side of the relationship."""
  connectByNodeId: [RankingNodeIdConnect!]

  """
  A `RankingInput` object that will be created and connected to this object.
  """
  create: [RankingsProtocolIdForeignRankingsCreateInput!]

  """The primary key(s) for `ranking` for the far side of the relationship."""
  deleteById: [RankingRankingsPkeyDelete!]

  """The primary key(s) for `ranking` for the far side of the relationship."""
  deleteByNodeId: [RankingNodeIdDelete!]

  """
  Flag indicating whether all other `ranking` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) and patch data for `ranking` for the far side of the relationship.
  """
  updateById: [RankingOnRankingForRankingsProtocolIdForeignUsingRankingsPkeyUpdate!]

  """
  The primary key(s) and patch data for `ranking` for the far side of the relationship.
  """
  updateByNodeId: [ProtocolOnRankingForRankingsProtocolIdForeignNodeIdUpdate!]
}

"""The `protocol` to be created by this mutation."""
input RankingsProtocolIdForeignProtocolsCreateInput {
  definitionsUsingId: DefinitionsProtocolIdForeignInverseInput
  earnedBadgesUsingId: EarnedBadgesProtocolIdForeignInverseInput
  id: String!
  rankingsUsingId: RankingsProtocolIdForeignInverseInput
  rolesUsingId: RolesProtocolIdForeignInverseInput
  tracksUsingId: TracksProtocolIdForeignInverseInput
}

"""The `ranking` to be created by this mutation."""
input RankingsProtocolIdForeignRankingsCreateInput {
  id: Int
  protocolToProtocolId: RankingsProtocolIdForeignInput
  rank: Int!
  winnerId: String
  winnerToWinnerId: RankingsWinnerIdForeignInput
}

"""
Input for the nested mutation of `winner` in the `RankingInput` mutation.
"""
input RankingsWinnerIdForeignInput {
  """The primary key(s) for `winner` for the far side of the relationship."""
  connectById: WinnerWinnersPkeyConnect

  """The primary key(s) for `winner` for the far side of the relationship."""
  connectByNodeId: WinnerNodeIdConnect

  """
  A `WinnerInput` object that will be created and connected to this object.
  """
  create: RankingsWinnerIdForeignWinnersCreateInput

  """The primary key(s) for `winner` for the far side of the relationship."""
  deleteById: WinnerWinnersPkeyDelete

  """The primary key(s) for `winner` for the far side of the relationship."""
  deleteByNodeId: WinnerNodeIdDelete

  """
  The primary key(s) and patch data for `winner` for the far side of the relationship.
  """
  updateById: WinnerOnRankingForRankingsWinnerIdForeignUsingWinnersPkeyUpdate

  """
  The primary key(s) and patch data for `winner` for the far side of the relationship.
  """
  updateByNodeId: RankingOnRankingForRankingsWinnerIdForeignNodeIdUpdate
}

"""
Input for the nested mutation of `ranking` in the `WinnerInput` mutation.
"""
input RankingsWinnerIdForeignInverseInput {
  """The primary key(s) for `ranking` for the far side of the relationship."""
  connectById: [RankingRankingsPkeyConnect!]

  """The primary key(s) for `ranking` for the far side of the relationship."""
  connectByNodeId: [RankingNodeIdConnect!]

  """
  A `RankingInput` object that will be created and connected to this object.
  """
  create: [RankingsWinnerIdForeignRankingsCreateInput!]

  """The primary key(s) for `ranking` for the far side of the relationship."""
  deleteById: [RankingRankingsPkeyDelete!]

  """The primary key(s) for `ranking` for the far side of the relationship."""
  deleteByNodeId: [RankingNodeIdDelete!]

  """
  Flag indicating whether all other `ranking` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) and patch data for `ranking` for the far side of the relationship.
  """
  updateById: [RankingOnRankingForRankingsWinnerIdForeignUsingRankingsPkeyUpdate!]

  """
  The primary key(s) and patch data for `ranking` for the far side of the relationship.
  """
  updateByNodeId: [WinnerOnRankingForRankingsWinnerIdForeignNodeIdUpdate!]
}

"""The `ranking` to be created by this mutation."""
input RankingsWinnerIdForeignRankingsCreateInput {
  id: Int
  protocolId: String
  protocolToProtocolId: RankingsProtocolIdForeignInput
  rank: Int!
  winnerToWinnerId: RankingsWinnerIdForeignInput
}

"""The `winner` to be created by this mutation."""
input RankingsWinnerIdForeignWinnersCreateInput {
  earnedBadgesUsingId: EarnedBadgesWinnerIdForeignInverseInput
  ens: String
  id: String!
  rankingsUsingId: RankingsWinnerIdForeignInverseInput
}

type Role implements Node {
  """Reads and enables pagination through a set of `Definition`."""
  definitionsByRoleIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DefinitionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DefinitionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Definition`."""
    orderBy: [DefinitionsOrderBy!]
  ): [Definition!]!
  id: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Protocol` that is related to this `Role`."""
  protocolByProtocolId: Protocol
  protocolId: String!
}

"""
A condition to be used against `Role` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RoleCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `protocolId` field."""
  protocolId: String
}

"""
A filter to be used against `Role` object types. All fields are combined with a logical ‘and.’
"""
input RoleFilter {
  """Checks for all expressions in this list."""
  and: [RoleFilter!]

  """Filter by the object’s `definitionsByRoleIdList` relation."""
  definitionsByRoleIdList: RoleToManyDefinitionFilter

  """Some related `definitionsByRoleIdList` exist."""
  definitionsByRoleIdListExist: Boolean

  """Filter by the object’s `id` field."""
  id: StringFilter

  """Negates the expression."""
  not: RoleFilter

  """Checks for any expressions in this list."""
  or: [RoleFilter!]

  """Filter by the object’s `protocolByProtocolId` relation."""
  protocolByProtocolId: ProtocolFilter

  """Filter by the object’s `protocolId` field."""
  protocolId: StringFilter
}

"""An input for mutations affecting `Role`"""
input RoleInput {
  definitionsUsingId: DefinitionsRoleIdForeignInverseInput
  id: String!
  protocolId: String
  protocolToProtocolId: RolesProtocolIdForeignInput
}

"""The globally unique `ID` look up for the row to connect."""
input RoleNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `role` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input RoleNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `role` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input RoleOnDefinitionForDefinitionsRoleIdForeignNodeIdUpdate {
  """
  An object where the defined keys will be set on the `definition` being updated.
  """
  definitionPatch: DefinitionPatch!

  """
  The globally unique `ID` which identifies a single `definition` to be connected.
  """
  nodeId: ID!
}

"""The fields on `role` to look up the row to update."""
input RoleOnDefinitionForDefinitionsRoleIdForeignUsingRolesIdProtocolIdUniqueUpdate {
  id: String!
  protocolId: String!

  """
  An object where the defined keys will be set on the `role` being updated.
  """
  rolePatch: updateRoleOnDefinitionForDefinitionsRoleIdForeignPatch!
}

"""The fields on `role` to look up the row to update."""
input RoleOnDefinitionForDefinitionsRoleIdForeignUsingRolesPkeyUpdate {
  id: String!

  """
  An object where the defined keys will be set on the `role` being updated.
  """
  rolePatch: updateRoleOnDefinitionForDefinitionsRoleIdForeignPatch!
}

"""The globally unique `ID` look up for the row to update."""
input RoleOnRoleForRolesProtocolIdForeignNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `protocol` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `protocol` being updated.
  """
  protocolPatch: ProtocolPatch!
}

"""The fields on `role` to look up the row to update."""
input RoleOnRoleForRolesProtocolIdForeignUsingRolesIdProtocolIdUniqueUpdate {
  id: String!
  protocolId: String!

  """
  An object where the defined keys will be set on the `role` being updated.
  """
  rolePatch: updateRoleOnRoleForRolesProtocolIdForeignPatch!
}

"""The fields on `role` to look up the row to update."""
input RoleOnRoleForRolesProtocolIdForeignUsingRolesPkeyUpdate {
  id: String!

  """
  An object where the defined keys will be set on the `role` being updated.
  """
  rolePatch: updateRoleOnRoleForRolesProtocolIdForeignPatch!
}

"""Represents an update to a `Role`. Fields that are set will be updated."""
input RolePatch {
  definitionsUsingId: DefinitionsRoleIdForeignInverseInput
  id: String
  protocolId: String
  protocolToProtocolId: RolesProtocolIdForeignInput
}

"""The fields on `role` to look up the row to connect."""
input RoleRolesIdProtocolIdUniqueConnect {
  id: String!
  protocolId: String!
}

"""The fields on `role` to look up the row to delete."""
input RoleRolesIdProtocolIdUniqueDelete {
  id: String!
  protocolId: String!
}

"""The fields on `role` to look up the row to connect."""
input RoleRolesPkeyConnect {
  id: String!
}

"""The fields on `role` to look up the row to delete."""
input RoleRolesPkeyDelete {
  id: String!
}

"""
A filter to be used against many `Definition` object types. All fields are combined with a logical ‘and.’
"""
input RoleToManyDefinitionFilter {
  """
  Every related `Definition` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DefinitionFilter

  """
  No related `Definition` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DefinitionFilter

  """
  Some related `Definition` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DefinitionFilter
}

"""Methods to use when ordering `Role`."""
enum RolesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROTOCOL_ID_ASC
  PROTOCOL_ID_DESC
}

"""
Input for the nested mutation of `protocol` in the `RoleInput` mutation.
"""
input RolesProtocolIdForeignInput {
  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  connectById: ProtocolProtocolsPkeyConnect

  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  connectByNodeId: ProtocolNodeIdConnect

  """
  A `ProtocolInput` object that will be created and connected to this object.
  """
  create: RolesProtocolIdForeignProtocolsCreateInput

  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  deleteById: ProtocolProtocolsPkeyDelete

  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  deleteByNodeId: ProtocolNodeIdDelete

  """
  The primary key(s) and patch data for `protocol` for the far side of the relationship.
  """
  updateById: ProtocolOnRoleForRolesProtocolIdForeignUsingProtocolsPkeyUpdate

  """
  The primary key(s) and patch data for `protocol` for the far side of the relationship.
  """
  updateByNodeId: RoleOnRoleForRolesProtocolIdForeignNodeIdUpdate
}

"""
Input for the nested mutation of `role` in the `ProtocolInput` mutation.
"""
input RolesProtocolIdForeignInverseInput {
  """The primary key(s) for `role` for the far side of the relationship."""
  connectById: [RoleRolesPkeyConnect!]

  """The primary key(s) for `role` for the far side of the relationship."""
  connectByIdAndProtocolId: [RoleRolesIdProtocolIdUniqueConnect!]

  """The primary key(s) for `role` for the far side of the relationship."""
  connectByNodeId: [RoleNodeIdConnect!]

  """
  A `RoleInput` object that will be created and connected to this object.
  """
  create: [RolesProtocolIdForeignRolesCreateInput!]

  """The primary key(s) for `role` for the far side of the relationship."""
  deleteById: [RoleRolesPkeyDelete!]

  """The primary key(s) for `role` for the far side of the relationship."""
  deleteByIdAndProtocolId: [RoleRolesIdProtocolIdUniqueDelete!]

  """The primary key(s) for `role` for the far side of the relationship."""
  deleteByNodeId: [RoleNodeIdDelete!]

  """
  Flag indicating whether all other `role` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) and patch data for `role` for the far side of the relationship.
  """
  updateById: [RoleOnRoleForRolesProtocolIdForeignUsingRolesPkeyUpdate!]

  """
  The primary key(s) and patch data for `role` for the far side of the relationship.
  """
  updateByIdAndProtocolId: [RoleOnRoleForRolesProtocolIdForeignUsingRolesIdProtocolIdUniqueUpdate!]

  """
  The primary key(s) and patch data for `role` for the far side of the relationship.
  """
  updateByNodeId: [ProtocolOnRoleForRolesProtocolIdForeignNodeIdUpdate!]
}

"""The `protocol` to be created by this mutation."""
input RolesProtocolIdForeignProtocolsCreateInput {
  definitionsUsingId: DefinitionsProtocolIdForeignInverseInput
  earnedBadgesUsingId: EarnedBadgesProtocolIdForeignInverseInput
  id: String!
  rankingsUsingId: RankingsProtocolIdForeignInverseInput
  rolesUsingId: RolesProtocolIdForeignInverseInput
  tracksUsingId: TracksProtocolIdForeignInverseInput
}

"""The `role` to be created by this mutation."""
input RolesProtocolIdForeignRolesCreateInput {
  definitionsUsingId: DefinitionsRoleIdForeignInverseInput
  id: String!
  protocolToProtocolId: RolesProtocolIdForeignInput
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

type Track implements Node {
  """Reads and enables pagination through a set of `Definition`."""
  definitionsByTrackIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DefinitionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DefinitionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Definition`."""
    orderBy: [DefinitionsOrderBy!]
  ): [Definition!]!
  id: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Protocol` that is related to this `Track`."""
  protocolByProtocolId: Protocol
  protocolId: String!
}

"""
A condition to be used against `Track` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TrackCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `protocolId` field."""
  protocolId: String
}

"""
A filter to be used against `Track` object types. All fields are combined with a logical ‘and.’
"""
input TrackFilter {
  """Checks for all expressions in this list."""
  and: [TrackFilter!]

  """Filter by the object’s `definitionsByTrackIdList` relation."""
  definitionsByTrackIdList: TrackToManyDefinitionFilter

  """Some related `definitionsByTrackIdList` exist."""
  definitionsByTrackIdListExist: Boolean

  """Filter by the object’s `id` field."""
  id: StringFilter

  """Negates the expression."""
  not: TrackFilter

  """Checks for any expressions in this list."""
  or: [TrackFilter!]

  """Filter by the object’s `protocolByProtocolId` relation."""
  protocolByProtocolId: ProtocolFilter

  """Filter by the object’s `protocolId` field."""
  protocolId: StringFilter
}

"""An input for mutations affecting `Track`"""
input TrackInput {
  definitionsUsingId: DefinitionsTrackIdForeignInverseInput
  id: String!
  protocolId: String
  protocolToProtocolId: TracksProtocolIdForeignInput
}

"""The globally unique `ID` look up for the row to connect."""
input TrackNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `track` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input TrackNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `track` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input TrackOnDefinitionForDefinitionsTrackIdForeignNodeIdUpdate {
  """
  An object where the defined keys will be set on the `definition` being updated.
  """
  definitionPatch: DefinitionPatch!

  """
  The globally unique `ID` which identifies a single `definition` to be connected.
  """
  nodeId: ID!
}

"""The fields on `track` to look up the row to update."""
input TrackOnDefinitionForDefinitionsTrackIdForeignUsingTracksIdProtocolIdUniqueUpdate {
  id: String!
  protocolId: String!

  """
  An object where the defined keys will be set on the `track` being updated.
  """
  trackPatch: updateTrackOnDefinitionForDefinitionsTrackIdForeignPatch!
}

"""The fields on `track` to look up the row to update."""
input TrackOnDefinitionForDefinitionsTrackIdForeignUsingTracksPkeyUpdate {
  id: String!

  """
  An object where the defined keys will be set on the `track` being updated.
  """
  trackPatch: updateTrackOnDefinitionForDefinitionsTrackIdForeignPatch!
}

"""The globally unique `ID` look up for the row to update."""
input TrackOnTrackForTracksProtocolIdForeignNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `protocol` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `protocol` being updated.
  """
  protocolPatch: ProtocolPatch!
}

"""The fields on `track` to look up the row to update."""
input TrackOnTrackForTracksProtocolIdForeignUsingTracksIdProtocolIdUniqueUpdate {
  id: String!
  protocolId: String!

  """
  An object where the defined keys will be set on the `track` being updated.
  """
  trackPatch: updateTrackOnTrackForTracksProtocolIdForeignPatch!
}

"""The fields on `track` to look up the row to update."""
input TrackOnTrackForTracksProtocolIdForeignUsingTracksPkeyUpdate {
  id: String!

  """
  An object where the defined keys will be set on the `track` being updated.
  """
  trackPatch: updateTrackOnTrackForTracksProtocolIdForeignPatch!
}

"""
Represents an update to a `Track`. Fields that are set will be updated.
"""
input TrackPatch {
  definitionsUsingId: DefinitionsTrackIdForeignInverseInput
  id: String
  protocolId: String
  protocolToProtocolId: TracksProtocolIdForeignInput
}

"""
A filter to be used against many `Definition` object types. All fields are combined with a logical ‘and.’
"""
input TrackToManyDefinitionFilter {
  """
  Every related `Definition` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DefinitionFilter

  """
  No related `Definition` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DefinitionFilter

  """
  Some related `Definition` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DefinitionFilter
}

"""The fields on `track` to look up the row to connect."""
input TrackTracksIdProtocolIdUniqueConnect {
  id: String!
  protocolId: String!
}

"""The fields on `track` to look up the row to delete."""
input TrackTracksIdProtocolIdUniqueDelete {
  id: String!
  protocolId: String!
}

"""The fields on `track` to look up the row to connect."""
input TrackTracksPkeyConnect {
  id: String!
}

"""The fields on `track` to look up the row to delete."""
input TrackTracksPkeyDelete {
  id: String!
}

"""Methods to use when ordering `Track`."""
enum TracksOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROTOCOL_ID_ASC
  PROTOCOL_ID_DESC
}

"""
Input for the nested mutation of `protocol` in the `TrackInput` mutation.
"""
input TracksProtocolIdForeignInput {
  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  connectById: ProtocolProtocolsPkeyConnect

  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  connectByNodeId: ProtocolNodeIdConnect

  """
  A `ProtocolInput` object that will be created and connected to this object.
  """
  create: TracksProtocolIdForeignProtocolsCreateInput

  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  deleteById: ProtocolProtocolsPkeyDelete

  """
  The primary key(s) for `protocol` for the far side of the relationship.
  """
  deleteByNodeId: ProtocolNodeIdDelete

  """
  The primary key(s) and patch data for `protocol` for the far side of the relationship.
  """
  updateById: ProtocolOnTrackForTracksProtocolIdForeignUsingProtocolsPkeyUpdate

  """
  The primary key(s) and patch data for `protocol` for the far side of the relationship.
  """
  updateByNodeId: TrackOnTrackForTracksProtocolIdForeignNodeIdUpdate
}

"""
Input for the nested mutation of `track` in the `ProtocolInput` mutation.
"""
input TracksProtocolIdForeignInverseInput {
  """The primary key(s) for `track` for the far side of the relationship."""
  connectById: [TrackTracksPkeyConnect!]

  """The primary key(s) for `track` for the far side of the relationship."""
  connectByIdAndProtocolId: [TrackTracksIdProtocolIdUniqueConnect!]

  """The primary key(s) for `track` for the far side of the relationship."""
  connectByNodeId: [TrackNodeIdConnect!]

  """
  A `TrackInput` object that will be created and connected to this object.
  """
  create: [TracksProtocolIdForeignTracksCreateInput!]

  """The primary key(s) for `track` for the far side of the relationship."""
  deleteById: [TrackTracksPkeyDelete!]

  """The primary key(s) for `track` for the far side of the relationship."""
  deleteByIdAndProtocolId: [TrackTracksIdProtocolIdUniqueDelete!]

  """The primary key(s) for `track` for the far side of the relationship."""
  deleteByNodeId: [TrackNodeIdDelete!]

  """
  Flag indicating whether all other `track` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) and patch data for `track` for the far side of the relationship.
  """
  updateById: [TrackOnTrackForTracksProtocolIdForeignUsingTracksPkeyUpdate!]

  """
  The primary key(s) and patch data for `track` for the far side of the relationship.
  """
  updateByIdAndProtocolId: [TrackOnTrackForTracksProtocolIdForeignUsingTracksIdProtocolIdUniqueUpdate!]

  """
  The primary key(s) and patch data for `track` for the far side of the relationship.
  """
  updateByNodeId: [ProtocolOnTrackForTracksProtocolIdForeignNodeIdUpdate!]
}

"""The `protocol` to be created by this mutation."""
input TracksProtocolIdForeignProtocolsCreateInput {
  definitionsUsingId: DefinitionsProtocolIdForeignInverseInput
  earnedBadgesUsingId: EarnedBadgesProtocolIdForeignInverseInput
  id: String!
  rankingsUsingId: RankingsProtocolIdForeignInverseInput
  rolesUsingId: RolesProtocolIdForeignInverseInput
  tracksUsingId: TracksProtocolIdForeignInverseInput
}

"""The `track` to be created by this mutation."""
input TracksProtocolIdForeignTracksCreateInput {
  definitionsUsingId: DefinitionsTrackIdForeignInverseInput
  id: String!
  protocolToProtocolId: TracksProtocolIdForeignInput
}

"""All input for the `updateAwardById` mutation."""
input UpdateAwardByIdInput {
  """
  An object where the defined keys will be set on the `Award` being updated.
  """
  awardPatch: AwardPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `updateAward` mutation."""
input UpdateAwardInput {
  """
  An object where the defined keys will be set on the `Award` being updated.
  """
  awardPatch: AwardPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Award` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `Award` mutation."""
type UpdateAwardPayload {
  """The `Award` that was updated by this mutation."""
  award: Award

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateDefinitionByIdAndProtocolId` mutation."""
input UpdateDefinitionByIdAndProtocolIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Definition` being updated.
  """
  definitionPatch: DefinitionPatch!
  id: String!
  protocolId: String!
}

"""All input for the `updateDefinitionById` mutation."""
input UpdateDefinitionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Definition` being updated.
  """
  definitionPatch: DefinitionPatch!
  id: String!
}

"""All input for the `updateDefinition` mutation."""
input UpdateDefinitionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Definition` being updated.
  """
  definitionPatch: DefinitionPatch!

  """
  The globally unique `ID` which will identify a single `Definition` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `Definition` mutation."""
type UpdateDefinitionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Definition` that was updated by this mutation."""
  definition: Definition

  """Reads a single `Protocol` that is related to this `Definition`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Role` that is related to this `Definition`."""
  roleByRoleId: Role

  """Reads a single `Track` that is related to this `Definition`."""
  trackByTrackId: Track
}

"""All input for the `updateEarnedBadgeById` mutation."""
input UpdateEarnedBadgeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EarnedBadge` being updated.
  """
  earnedBadgePatch: EarnedBadgePatch!
  id: String!
}

"""All input for the `updateEarnedBadge` mutation."""
input UpdateEarnedBadgeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EarnedBadge` being updated.
  """
  earnedBadgePatch: EarnedBadgePatch!

  """
  The globally unique `ID` which will identify a single `EarnedBadge` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `EarnedBadge` mutation."""
type UpdateEarnedBadgePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Definition` that is related to this `EarnedBadge`."""
  definitionByDefinitionId: Definition

  """The `EarnedBadge` that was updated by this mutation."""
  earnedBadge: EarnedBadge

  """Reads a single `Protocol` that is related to this `EarnedBadge`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Winner` that is related to this `EarnedBadge`."""
  winnerByWinnerId: Winner
}

"""All input for the `updateKnexMigrationById` mutation."""
input UpdateKnexMigrationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `KnexMigration` being updated.
  """
  knexMigrationPatch: KnexMigrationPatch!
}

"""All input for the `updateKnexMigration` mutation."""
input UpdateKnexMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `KnexMigration` being updated.
  """
  knexMigrationPatch: KnexMigrationPatch!

  """
  The globally unique `ID` which will identify a single `KnexMigration` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `KnexMigration` mutation."""
type UpdateKnexMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigration` that was updated by this mutation."""
  knexMigration: KnexMigration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateKnexMigrationsLockByIndex` mutation."""
input UpdateKnexMigrationsLockByIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  index: Int!

  """
  An object where the defined keys will be set on the `KnexMigrationsLock` being updated.
  """
  knexMigrationsLockPatch: KnexMigrationsLockPatch!
}

"""All input for the `updateKnexMigrationsLock` mutation."""
input UpdateKnexMigrationsLockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `KnexMigrationsLock` being updated.
  """
  knexMigrationsLockPatch: KnexMigrationsLockPatch!

  """
  The globally unique `ID` which will identify a single `KnexMigrationsLock` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `KnexMigrationsLock` mutation."""
type UpdateKnexMigrationsLockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigrationsLock` that was updated by this mutation."""
  knexMigrationsLock: KnexMigrationsLock

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProtocolById` mutation."""
input UpdateProtocolByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!

  """
  An object where the defined keys will be set on the `Protocol` being updated.
  """
  protocolPatch: ProtocolPatch!
}

"""All input for the `updateProtocol` mutation."""
input UpdateProtocolInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Protocol` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Protocol` being updated.
  """
  protocolPatch: ProtocolPatch!
}

"""The output of our update `Protocol` mutation."""
type UpdateProtocolPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Protocol` that was updated by this mutation."""
  protocol: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateRankingById` mutation."""
input UpdateRankingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Ranking` being updated.
  """
  rankingPatch: RankingPatch!
}

"""All input for the `updateRanking` mutation."""
input UpdateRankingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Ranking` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Ranking` being updated.
  """
  rankingPatch: RankingPatch!
}

"""The output of our update `Ranking` mutation."""
type UpdateRankingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Protocol` that is related to this `Ranking`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Ranking` that was updated by this mutation."""
  ranking: Ranking

  """Reads a single `Winner` that is related to this `Ranking`."""
  winnerByWinnerId: Winner
}

"""All input for the `updateRoleByIdAndProtocolId` mutation."""
input UpdateRoleByIdAndProtocolIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
  protocolId: String!

  """
  An object where the defined keys will be set on the `Role` being updated.
  """
  rolePatch: RolePatch!
}

"""All input for the `updateRoleById` mutation."""
input UpdateRoleByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!

  """
  An object where the defined keys will be set on the `Role` being updated.
  """
  rolePatch: RolePatch!
}

"""All input for the `updateRole` mutation."""
input UpdateRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Role` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Role` being updated.
  """
  rolePatch: RolePatch!
}

"""The output of our update `Role` mutation."""
type UpdateRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Protocol` that is related to this `Role`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Role` that was updated by this mutation."""
  role: Role
}

"""All input for the `updateTrackByIdAndProtocolId` mutation."""
input UpdateTrackByIdAndProtocolIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
  protocolId: String!

  """
  An object where the defined keys will be set on the `Track` being updated.
  """
  trackPatch: TrackPatch!
}

"""All input for the `updateTrackById` mutation."""
input UpdateTrackByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!

  """
  An object where the defined keys will be set on the `Track` being updated.
  """
  trackPatch: TrackPatch!
}

"""All input for the `updateTrack` mutation."""
input UpdateTrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Track` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Track` being updated.
  """
  trackPatch: TrackPatch!
}

"""The output of our update `Track` mutation."""
type UpdateTrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Protocol` that is related to this `Track`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Track` that was updated by this mutation."""
  track: Track
}

"""All input for the `updateWinnerById` mutation."""
input UpdateWinnerByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!

  """
  An object where the defined keys will be set on the `Winner` being updated.
  """
  winnerPatch: WinnerPatch!
}

"""All input for the `updateWinner` mutation."""
input UpdateWinnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Winner` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Winner` being updated.
  """
  winnerPatch: WinnerPatch!
}

"""The output of our update `Winner` mutation."""
type UpdateWinnerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Winner` that was updated by this mutation."""
  winner: Winner
}

"""All input for the upsert `Award` mutation."""
input UpsertAwardInput {
  """The `Award` to be upserted by this mutation."""
  award: AwardInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our upsert `Award` mutation."""
type UpsertAwardPayload {
  """The `Award` that was upserted by this mutation."""
  award: Award

  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Where conditions for the upsert `Award` mutation."""
input UpsertAwardWhere {
  id: Int
}

"""All input for the upsert `Definition` mutation."""
input UpsertDefinitionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Definition` to be upserted by this mutation."""
  definition: DefinitionInput!
}

"""The output of our upsert `Definition` mutation."""
type UpsertDefinitionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Definition` that was upserted by this mutation."""
  definition: Definition

  """Reads a single `Protocol` that is related to this `Definition`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Role` that is related to this `Definition`."""
  roleByRoleId: Role

  """Reads a single `Track` that is related to this `Definition`."""
  trackByTrackId: Track
}

"""Where conditions for the upsert `Definition` mutation."""
input UpsertDefinitionWhere {
  id: String
  protocolId: String
}

"""All input for the upsert `EarnedBadge` mutation."""
input UpsertEarnedBadgeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EarnedBadge` to be upserted by this mutation."""
  earnedBadge: EarnedBadgeInput!
}

"""The output of our upsert `EarnedBadge` mutation."""
type UpsertEarnedBadgePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Definition` that is related to this `EarnedBadge`."""
  definitionByDefinitionId: Definition

  """The `EarnedBadge` that was upserted by this mutation."""
  earnedBadge: EarnedBadge

  """Reads a single `Protocol` that is related to this `EarnedBadge`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Winner` that is related to this `EarnedBadge`."""
  winnerByWinnerId: Winner
}

"""Where conditions for the upsert `EarnedBadge` mutation."""
input UpsertEarnedBadgeWhere {
  id: String
}

"""All input for the upsert `KnexMigration` mutation."""
input UpsertKnexMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `KnexMigration` to be upserted by this mutation."""
  knexMigration: KnexMigrationInput!
}

"""The output of our upsert `KnexMigration` mutation."""
type UpsertKnexMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigration` that was upserted by this mutation."""
  knexMigration: KnexMigration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Where conditions for the upsert `KnexMigration` mutation."""
input UpsertKnexMigrationWhere {
  id: Int
}

"""All input for the upsert `KnexMigrationsLock` mutation."""
input UpsertKnexMigrationsLockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `KnexMigrationsLock` to be upserted by this mutation."""
  knexMigrationsLock: KnexMigrationsLockInput!
}

"""The output of our upsert `KnexMigrationsLock` mutation."""
type UpsertKnexMigrationsLockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigrationsLock` that was upserted by this mutation."""
  knexMigrationsLock: KnexMigrationsLock

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Where conditions for the upsert `KnexMigrationsLock` mutation."""
input UpsertKnexMigrationsLockWhere {
  index: Int
}

"""All input for the upsert `Protocol` mutation."""
input UpsertProtocolInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Protocol` to be upserted by this mutation."""
  protocol: ProtocolInput!
}

"""The output of our upsert `Protocol` mutation."""
type UpsertProtocolPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Protocol` that was upserted by this mutation."""
  protocol: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Where conditions for the upsert `Protocol` mutation."""
input UpsertProtocolWhere {
  id: String
}

"""All input for the upsert `Ranking` mutation."""
input UpsertRankingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Ranking` to be upserted by this mutation."""
  ranking: RankingInput!
}

"""The output of our upsert `Ranking` mutation."""
type UpsertRankingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Protocol` that is related to this `Ranking`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Ranking` that was upserted by this mutation."""
  ranking: Ranking

  """Reads a single `Winner` that is related to this `Ranking`."""
  winnerByWinnerId: Winner
}

"""Where conditions for the upsert `Ranking` mutation."""
input UpsertRankingWhere {
  id: Int
}

"""All input for the upsert `Role` mutation."""
input UpsertRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Role` to be upserted by this mutation."""
  role: RoleInput!
}

"""The output of our upsert `Role` mutation."""
type UpsertRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Protocol` that is related to this `Role`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Role` that was upserted by this mutation."""
  role: Role
}

"""Where conditions for the upsert `Role` mutation."""
input UpsertRoleWhere {
  id: String
  protocolId: String
}

"""All input for the upsert `Track` mutation."""
input UpsertTrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Track` to be upserted by this mutation."""
  track: TrackInput!
}

"""The output of our upsert `Track` mutation."""
type UpsertTrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Protocol` that is related to this `Track`."""
  protocolByProtocolId: Protocol

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Track` that was upserted by this mutation."""
  track: Track
}

"""Where conditions for the upsert `Track` mutation."""
input UpsertTrackWhere {
  id: String
  protocolId: String
}

"""All input for the upsert `Winner` mutation."""
input UpsertWinnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Winner` to be upserted by this mutation."""
  winner: WinnerInput!
}

"""The output of our upsert `Winner` mutation."""
type UpsertWinnerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Winner` that was upserted by this mutation."""
  winner: Winner
}

"""Where conditions for the upsert `Winner` mutation."""
input UpsertWinnerWhere {
  id: String
}

type Winner implements Node {
  """Reads and enables pagination through a set of `EarnedBadge`."""
  earnedBadgesByWinnerIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EarnedBadgeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EarnedBadgeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EarnedBadge`."""
    orderBy: [EarnedBadgesOrderBy!]
  ): [EarnedBadge!]!
  ens: String
  id: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Ranking`."""
  rankingsByWinnerIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RankingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RankingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Ranking`."""
    orderBy: [RankingsOrderBy!]
  ): [Ranking!]!
}

"""
A condition to be used against `Winner` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input WinnerCondition {
  """Checks for equality with the object’s `ens` field."""
  ens: String

  """Checks for equality with the object’s `id` field."""
  id: String
}

"""
A filter to be used against `Winner` object types. All fields are combined with a logical ‘and.’
"""
input WinnerFilter {
  """Checks for all expressions in this list."""
  and: [WinnerFilter!]

  """Filter by the object’s `earnedBadgesByWinnerIdList` relation."""
  earnedBadgesByWinnerIdList: WinnerToManyEarnedBadgeFilter

  """Some related `earnedBadgesByWinnerIdList` exist."""
  earnedBadgesByWinnerIdListExist: Boolean

  """Filter by the object’s `ens` field."""
  ens: StringFilter

  """Filter by the object’s `id` field."""
  id: StringFilter

  """Negates the expression."""
  not: WinnerFilter

  """Checks for any expressions in this list."""
  or: [WinnerFilter!]

  """Filter by the object’s `rankingsByWinnerIdList` relation."""
  rankingsByWinnerIdList: WinnerToManyRankingFilter

  """Some related `rankingsByWinnerIdList` exist."""
  rankingsByWinnerIdListExist: Boolean
}

"""An input for mutations affecting `Winner`"""
input WinnerInput {
  earnedBadgesUsingId: EarnedBadgesWinnerIdForeignInverseInput
  ens: String
  id: String!
  rankingsUsingId: RankingsWinnerIdForeignInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input WinnerNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `winner` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input WinnerNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `winner` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input WinnerOnEarnedBadgeForEarnedBadgesWinnerIdForeignNodeIdUpdate {
  """
  An object where the defined keys will be set on the `earnedBadge` being updated.
  """
  earnedBadgePatch: EarnedBadgePatch!

  """
  The globally unique `ID` which identifies a single `earnedBadge` to be connected.
  """
  nodeId: ID!
}

"""The fields on `winner` to look up the row to update."""
input WinnerOnEarnedBadgeForEarnedBadgesWinnerIdForeignUsingWinnersPkeyUpdate {
  id: String!

  """
  An object where the defined keys will be set on the `winner` being updated.
  """
  winnerPatch: updateWinnerOnEarnedBadgeForEarnedBadgesWinnerIdForeignPatch!
}

"""The globally unique `ID` look up for the row to update."""
input WinnerOnRankingForRankingsWinnerIdForeignNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `ranking` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ranking` being updated.
  """
  rankingPatch: RankingPatch!
}

"""The fields on `winner` to look up the row to update."""
input WinnerOnRankingForRankingsWinnerIdForeignUsingWinnersPkeyUpdate {
  id: String!

  """
  An object where the defined keys will be set on the `winner` being updated.
  """
  winnerPatch: updateWinnerOnRankingForRankingsWinnerIdForeignPatch!
}

"""
Represents an update to a `Winner`. Fields that are set will be updated.
"""
input WinnerPatch {
  earnedBadgesUsingId: EarnedBadgesWinnerIdForeignInverseInput
  ens: String
  id: String
  rankingsUsingId: RankingsWinnerIdForeignInverseInput
}

"""
A filter to be used against many `EarnedBadge` object types. All fields are combined with a logical ‘and.’
"""
input WinnerToManyEarnedBadgeFilter {
  """
  Every related `EarnedBadge` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EarnedBadgeFilter

  """
  No related `EarnedBadge` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EarnedBadgeFilter

  """
  Some related `EarnedBadge` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EarnedBadgeFilter
}

"""
A filter to be used against many `Ranking` object types. All fields are combined with a logical ‘and.’
"""
input WinnerToManyRankingFilter {
  """
  Every related `Ranking` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RankingFilter

  """
  No related `Ranking` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RankingFilter

  """
  Some related `Ranking` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RankingFilter
}

"""The fields on `winner` to look up the row to connect."""
input WinnerWinnersPkeyConnect {
  id: String!
}

"""The fields on `winner` to look up the row to delete."""
input WinnerWinnersPkeyDelete {
  id: String!
}

"""Methods to use when ordering `Winner`."""
enum WinnersOrderBy {
  ENS_ASC
  ENS_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
An object where the defined keys will be set on the `definition` being updated.
"""
input updateDefinitionOnDefinitionForDefinitionsProtocolIdForeignPatch {
  definition: String
  earnedBadgesUsingId: EarnedBadgesDefinitionIdForeignInverseInput
  id: String
  ipfsUri: String
  metric: String
  protocolToProtocolId: DefinitionsProtocolIdForeignInput
  roleId: String
  roleToRoleId: DefinitionsRoleIdForeignInput
  threshold: String
  trackId: String
  trackToTrackId: DefinitionsTrackIdForeignInput
}

"""
An object where the defined keys will be set on the `definition` being updated.
"""
input updateDefinitionOnDefinitionForDefinitionsRoleIdForeignPatch {
  definition: String
  earnedBadgesUsingId: EarnedBadgesDefinitionIdForeignInverseInput
  id: String
  ipfsUri: String
  metric: String
  protocolId: String
  protocolToProtocolId: DefinitionsProtocolIdForeignInput
  roleToRoleId: DefinitionsRoleIdForeignInput
  threshold: String
  trackId: String
  trackToTrackId: DefinitionsTrackIdForeignInput
}

"""
An object where the defined keys will be set on the `definition` being updated.
"""
input updateDefinitionOnDefinitionForDefinitionsTrackIdForeignPatch {
  definition: String
  earnedBadgesUsingId: EarnedBadgesDefinitionIdForeignInverseInput
  id: String
  ipfsUri: String
  metric: String
  protocolId: String
  protocolToProtocolId: DefinitionsProtocolIdForeignInput
  roleId: String
  roleToRoleId: DefinitionsRoleIdForeignInput
  threshold: String
  trackToTrackId: DefinitionsTrackIdForeignInput
}

"""
An object where the defined keys will be set on the `definition` being updated.
"""
input updateDefinitionOnEarnedBadgeForEarnedBadgesDefinitionIdForeignPatch {
  definition: String
  earnedBadgesUsingId: EarnedBadgesDefinitionIdForeignInverseInput
  id: String
  ipfsUri: String
  metric: String
  protocolId: String
  protocolToProtocolId: DefinitionsProtocolIdForeignInput
  roleId: String
  roleToRoleId: DefinitionsRoleIdForeignInput
  threshold: String
  trackId: String
  trackToTrackId: DefinitionsTrackIdForeignInput
}

"""
An object where the defined keys will be set on the `earnedBadge` being updated.
"""
input updateEarnedBadgeOnEarnedBadgeForEarnedBadgesDefinitionIdForeignPatch {
  awardNumber: Int
  blockAwarded: Int
  definitionToDefinitionId: EarnedBadgesDefinitionIdForeignInput
  globalAwardNumber: Int
  id: String
  metadata: JSON
  protocolId: String
  protocolToProtocolId: EarnedBadgesProtocolIdForeignInput
  timestampAwarded: Int
  transactionHash: String
  winnerId: String
  winnerToWinnerId: EarnedBadgesWinnerIdForeignInput
}

"""
An object where the defined keys will be set on the `earnedBadge` being updated.
"""
input updateEarnedBadgeOnEarnedBadgeForEarnedBadgesProtocolIdForeignPatch {
  awardNumber: Int
  blockAwarded: Int
  definitionId: String
  definitionToDefinitionId: EarnedBadgesDefinitionIdForeignInput
  globalAwardNumber: Int
  id: String
  metadata: JSON
  protocolToProtocolId: EarnedBadgesProtocolIdForeignInput
  timestampAwarded: Int
  transactionHash: String
  winnerId: String
  winnerToWinnerId: EarnedBadgesWinnerIdForeignInput
}

"""
An object where the defined keys will be set on the `earnedBadge` being updated.
"""
input updateEarnedBadgeOnEarnedBadgeForEarnedBadgesWinnerIdForeignPatch {
  awardNumber: Int
  blockAwarded: Int
  definitionId: String
  definitionToDefinitionId: EarnedBadgesDefinitionIdForeignInput
  globalAwardNumber: Int
  id: String
  metadata: JSON
  protocolId: String
  protocolToProtocolId: EarnedBadgesProtocolIdForeignInput
  timestampAwarded: Int
  transactionHash: String
  winnerToWinnerId: EarnedBadgesWinnerIdForeignInput
}

"""
An object where the defined keys will be set on the `protocol` being updated.
"""
input updateProtocolOnDefinitionForDefinitionsProtocolIdForeignPatch {
  definitionsUsingId: DefinitionsProtocolIdForeignInverseInput
  earnedBadgesUsingId: EarnedBadgesProtocolIdForeignInverseInput
  id: String
  rankingsUsingId: RankingsProtocolIdForeignInverseInput
  rolesUsingId: RolesProtocolIdForeignInverseInput
  tracksUsingId: TracksProtocolIdForeignInverseInput
}

"""
An object where the defined keys will be set on the `protocol` being updated.
"""
input updateProtocolOnEarnedBadgeForEarnedBadgesProtocolIdForeignPatch {
  definitionsUsingId: DefinitionsProtocolIdForeignInverseInput
  earnedBadgesUsingId: EarnedBadgesProtocolIdForeignInverseInput
  id: String
  rankingsUsingId: RankingsProtocolIdForeignInverseInput
  rolesUsingId: RolesProtocolIdForeignInverseInput
  tracksUsingId: TracksProtocolIdForeignInverseInput
}

"""
An object where the defined keys will be set on the `protocol` being updated.
"""
input updateProtocolOnRankingForRankingsProtocolIdForeignPatch {
  definitionsUsingId: DefinitionsProtocolIdForeignInverseInput
  earnedBadgesUsingId: EarnedBadgesProtocolIdForeignInverseInput
  id: String
  rankingsUsingId: RankingsProtocolIdForeignInverseInput
  rolesUsingId: RolesProtocolIdForeignInverseInput
  tracksUsingId: TracksProtocolIdForeignInverseInput
}

"""
An object where the defined keys will be set on the `protocol` being updated.
"""
input updateProtocolOnRoleForRolesProtocolIdForeignPatch {
  definitionsUsingId: DefinitionsProtocolIdForeignInverseInput
  earnedBadgesUsingId: EarnedBadgesProtocolIdForeignInverseInput
  id: String
  rankingsUsingId: RankingsProtocolIdForeignInverseInput
  rolesUsingId: RolesProtocolIdForeignInverseInput
  tracksUsingId: TracksProtocolIdForeignInverseInput
}

"""
An object where the defined keys will be set on the `protocol` being updated.
"""
input updateProtocolOnTrackForTracksProtocolIdForeignPatch {
  definitionsUsingId: DefinitionsProtocolIdForeignInverseInput
  earnedBadgesUsingId: EarnedBadgesProtocolIdForeignInverseInput
  id: String
  rankingsUsingId: RankingsProtocolIdForeignInverseInput
  rolesUsingId: RolesProtocolIdForeignInverseInput
  tracksUsingId: TracksProtocolIdForeignInverseInput
}

"""
An object where the defined keys will be set on the `ranking` being updated.
"""
input updateRankingOnRankingForRankingsProtocolIdForeignPatch {
  id: Int
  protocolToProtocolId: RankingsProtocolIdForeignInput
  rank: Int
  winnerId: String
  winnerToWinnerId: RankingsWinnerIdForeignInput
}

"""
An object where the defined keys will be set on the `ranking` being updated.
"""
input updateRankingOnRankingForRankingsWinnerIdForeignPatch {
  id: Int
  protocolId: String
  protocolToProtocolId: RankingsProtocolIdForeignInput
  rank: Int
  winnerToWinnerId: RankingsWinnerIdForeignInput
}

"""
An object where the defined keys will be set on the `role` being updated.
"""
input updateRoleOnDefinitionForDefinitionsRoleIdForeignPatch {
  definitionsUsingId: DefinitionsRoleIdForeignInverseInput
  id: String
  protocolId: String
  protocolToProtocolId: RolesProtocolIdForeignInput
}

"""
An object where the defined keys will be set on the `role` being updated.
"""
input updateRoleOnRoleForRolesProtocolIdForeignPatch {
  definitionsUsingId: DefinitionsRoleIdForeignInverseInput
  id: String
  protocolToProtocolId: RolesProtocolIdForeignInput
}

"""
An object where the defined keys will be set on the `track` being updated.
"""
input updateTrackOnDefinitionForDefinitionsTrackIdForeignPatch {
  definitionsUsingId: DefinitionsTrackIdForeignInverseInput
  id: String
  protocolId: String
  protocolToProtocolId: TracksProtocolIdForeignInput
}

"""
An object where the defined keys will be set on the `track` being updated.
"""
input updateTrackOnTrackForTracksProtocolIdForeignPatch {
  definitionsUsingId: DefinitionsTrackIdForeignInverseInput
  id: String
  protocolToProtocolId: TracksProtocolIdForeignInput
}

"""
An object where the defined keys will be set on the `winner` being updated.
"""
input updateWinnerOnEarnedBadgeForEarnedBadgesWinnerIdForeignPatch {
  earnedBadgesUsingId: EarnedBadgesWinnerIdForeignInverseInput
  ens: String
  id: String
  rankingsUsingId: RankingsWinnerIdForeignInverseInput
}

"""
An object where the defined keys will be set on the `winner` being updated.
"""
input updateWinnerOnRankingForRankingsWinnerIdForeignPatch {
  earnedBadgesUsingId: EarnedBadgesWinnerIdForeignInverseInput
  ens: String
  id: String
  rankingsUsingId: RankingsWinnerIdForeignInverseInput
}
